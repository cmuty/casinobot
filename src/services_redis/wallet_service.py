from typing import Optional
from src.redis_db import db
from src.models_redis import Wallet, Transaction
import logging

logger = logging.getLogger(__name__)


class WalletService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏ –≤ Redis"""
    
    @staticmethod
    async def get_or_create_wallet(user_id: int) -> Wallet:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫"""
        wallet_data = await db.get_wallet(user_id)
        
        if not wallet_data:
            wallet = Wallet(user_id=user_id, balance_cents=0)
            await db.set_wallet(user_id, wallet.to_dict())
            return wallet
        
        return Wallet.from_dict(wallet_data)
    
    @staticmethod
    async def get_balance(user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return await db.get_balance(user_id)
    
    @staticmethod
    async def credit(user_id: int, amount_cents: int, reason: str) -> Transaction:
        """–ù–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
        new_balance = await db.increment_balance(user_id, amount_cents)
        
        # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user_id,
            type='credit',
            amount_cents=amount_cents,
            status='completed',
            meta=reason
        )
        
        await db.add_transaction(transaction.to_dict())
        
        logger.info(f"üí∞ Credit: user={user_id}, amount={amount_cents}, reason={reason}, new_balance={new_balance}")
        
        return transaction
    
    @staticmethod
    async def debit(user_id: int, amount_cents: int, reason: str) -> Transaction:
        """–°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        current_balance = await db.get_balance(user_id)
        
        if current_balance < amount_cents:
            raise ValueError("Insufficient funds")
        
        # –£–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å
        new_balance = await db.decrement_balance(user_id, amount_cents)
        
        # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
        transaction = Transaction(
            user_id=user_id,
            type='debit',
            amount_cents=amount_cents,
            status='completed',
            meta=reason
        )
        
        await db.add_transaction(transaction.to_dict())
        
        logger.info(f"üí∏ Debit: user={user_id}, amount={amount_cents}, reason={reason}, new_balance={new_balance}")
        
        return transaction
    
    @staticmethod
    async def add_funds(user_id: int, amount_cents: int, reason: str) -> Transaction:
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (–∞–ª–∏–∞—Å –¥–ª—è credit)"""
        return await WalletService.credit(user_id, amount_cents, reason)
    
    @staticmethod
    async def set_balance(user_id: int, new_balance_cents: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        wallet = await WalletService.get_or_create_wallet(user_id)
        wallet.balance_cents = new_balance_cents
        wallet.updated_at = wallet.updated_at
        
        await db.set_wallet(user_id, wallet.to_dict())
        
        logger.info(f"‚úèÔ∏è Set balance: user={user_id}, new_balance={new_balance_cents}")


wallet_service = WalletService()
