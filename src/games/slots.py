import secrets
import hmac
import hashlib


class SlotMachine:
    """–°–ª–æ—Ç-–º–∞—à–∏–Ω–∞ —Å Provably Fair"""
    
    SYMBOLS = ['üçí', 'üçã', 'üçä', 'üçâ', '‚≠ê', '7Ô∏è‚É£', 'üíé']
    WEIGHTS = [30, 25, 20, 15, 7, 2, 1]
    
    PAYTABLE = {
        'üçíüçíüçí': 2,
        'üçãüçãüçã': 3,
        'üçäüçäüçä': 5,
        'üçâüçâüçâ': 10,
        '‚≠ê‚≠ê‚≠ê': 20,
        '7Ô∏è‚É£7Ô∏è‚É£7Ô∏è‚É£': 50,
        'üíéüíéüíé': 100,
    }
    
    @staticmethod
    def spin(server_seed: str, client_seed: str, nonce: int) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∏–º–≤–æ–ª–æ–≤ (Provably Fair)"""
        combined = f"{server_seed}:{client_seed}:{nonce}"
        hash_result = hmac.new(
            server_seed.encode(),
            combined.encode(),
            hashlib.sha256
        ).hexdigest()
        
        results = []
        for i in range(3):
            chunk = int(hash_result[i*16:(i+1)*16], 16)
            index = chunk % sum(SlotMachine.WEIGHTS)
            
            cumulative = 0
            for j, weight in enumerate(SlotMachine.WEIGHTS):
                cumulative += weight
                if index < cumulative:
                    results.append(SlotMachine.SYMBOLS[j])
                    break
        
        return results
    
    @staticmethod
    def calculate_payout(symbols: list, stake: int) -> int:
        """–†–∞—Å—á—ë—Ç –≤—ã–ø–ª–∞—Ç—ã"""
        key = ''.join(symbols)
        
        # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        if len(set(symbols)) == 1:
            multiplier = SlotMachine.PAYTABLE.get(key, 0)
            return stake * multiplier
        
        # –î–≤–∞ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö
        if len(set(symbols)) == 2:
            return int(stake * 0.5)
        
        return 0