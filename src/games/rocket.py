import random
import asyncio
import math


class RocketGame:
    """–ò–≥—Ä–∞ –†–∞–∫–µ—Ç–∫–∞ (Crash Game)"""
    
    # –ù–∞—á–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
    START_MULTIPLIER = 1.0
    
    # –ò–Ω–∫—Ä–µ–º–µ–Ω—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∫–∞–∂–¥—ã–π —Ç–∏–∫ (0.1x)
    MULTIPLIER_INCREMENT = 0.1
    
    # –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0.1 —Å–µ–∫—É–Ω–¥—ã = 100ms)
    UPDATE_INTERVAL = 0.1
    
    # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–∑–∞—â–∏—Ç–∞ –æ—Ç –∞–±—É–∑–æ–≤)
    MAX_MULTIPLIER = 10.0
    
    @staticmethod
    def calculate_crash_point() -> float:
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Ç–æ—á–∫—É –∫—Ä–∞—à–∞ —Å –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º.
        –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤—É—é –∏–≥—Ä—É —Å –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –æ–∂–∏–¥–∞–Ω–∏–µ–º ~95% RTP.
        """
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
        # House edge ~5%
        house_edge = 0.05
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 1
        rand = random.random()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–æ—Ä–º—É–ª—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –±–æ–ª–µ–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–≥–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è
        # –ú–∏–Ω–∏–º—É–º 1.1x, –º–∞–∫—Å–∏–º—É–º 10.0x
        if rand < 0.1:  # 10% —à–∞–Ω—Å –Ω–∞ –Ω–∏–∑–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (1.1x - 2.0x)
            crash_point = 1.1 + (rand / 0.1) * 0.9
        elif rand < 0.3:  # 20% —à–∞–Ω—Å –Ω–∞ —Å—Ä–µ–¥–Ω–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (2.0x - 4.0x)
            crash_point = 2.0 + ((rand - 0.1) / 0.2) * 2.0
        elif rand < 0.6:  # 30% —à–∞–Ω—Å –Ω–∞ —Ö–æ—Ä–æ—à–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (4.0x - 6.0x)
            crash_point = 4.0 + ((rand - 0.3) / 0.3) * 2.0
        elif rand < 0.8:  # 20% —à–∞–Ω—Å –Ω–∞ –≤—ã—Å–æ–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (6.0x - 8.0x)
            crash_point = 6.0 + ((rand - 0.6) / 0.2) * 2.0
        else:  # 20% —à–∞–Ω—Å –Ω–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã (8.0x - 10.0x)
            crash_point = 8.0 + ((rand - 0.8) / 0.2) * 2.0
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º house edge
        crash_point = crash_point * (1 - house_edge)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫—Ä–∞—à –¥–æ 1.1x –∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –¥–æ MAX_MULTIPLIER
        crash_point = max(1.1, min(crash_point, RocketGame.MAX_MULTIPLIER))
        
        return round(crash_point, 1)
    
    @staticmethod
    def calculate_payout(stake: int, multiplier: float) -> int:
        """–†–∞—Å—á—ë—Ç –≤—ã–ø–ª–∞—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–≤–∫–∏ –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
        return int(stake * multiplier)
    
    @staticmethod
    async def simulate_rocket(crash_point: float, callback_func):
        """
        –°–∏–º—É–ª–∏—Ä—É–µ—Ç –ø–æ–ª–µ—Ç —Ä–∞–∫–µ—Ç—ã —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∫–∞–∂–¥—ã–µ UPDATE_INTERVAL —Å–µ–∫—É–Ω–¥.
        
        Args:
            crash_point: –¢–æ—á–∫–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∫–µ—Ç–∞ –≤–∑–æ—Ä–≤–µ—Ç—Å—è
            callback_func: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
                          –î–æ–ª–∂–Ω–∞ –ø—Ä–∏–Ω–∏–º–∞—Ç—å (current_multiplier, is_crashed)
                          –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –∏–≥—Ä–∞ –¥–æ–ª–∂–Ω–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å—Å—è, False –µ—Å–ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è
        """
        current_multiplier = RocketGame.START_MULTIPLIER
        
        while current_multiplier < crash_point:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
            should_continue = await callback_func(current_multiplier, False)
            
            # –ï—Å–ª–∏ callback –≤–µ—Ä–Ω—É–ª False, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
            if not should_continue:
                return
            
            # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
            await asyncio.sleep(RocketGame.UPDATE_INTERVAL)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –º–Ω–æ–∂–∏—Ç–µ–ª—å
            current_multiplier = round(current_multiplier + RocketGame.MULTIPLIER_INCREMENT, 1)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ª–∏–º–∏—Ç
            if current_multiplier >= RocketGame.MAX_MULTIPLIER:
                await callback_func(RocketGame.MAX_MULTIPLIER, False)
                break
        
        # –†–∞–∫–µ—Ç–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å!
        await callback_func(crash_point, True)
    
    @staticmethod
    def format_multiplier(multiplier: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–Ω–æ–∂–∏—Ç–µ–ª—å –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return f"{multiplier:.1f}x"
    
    @staticmethod
    def get_rocket_emoji(multiplier: float) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–º–æ–¥–∑–∏ —Ä–∞–∫–µ—Ç—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
        if multiplier < 2.0:
            return "üöÄ"
        elif multiplier < 4.0:
            return "üöÄüí®"
        elif multiplier < 6.0:
            return "üöÄüí®üí®"
        else:
            return "üöÄüí®üí®üí®"

