from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from sqlalchemy import select, func
from src.models import User, Bet
from src.config import settings
from src.services.wallet_service import wallet_service
from src.utils.keyboards import get_main_menu_keyboard # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã

router = Router()

def is_admin(telegram_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    return telegram_id == settings.ADMIN_ID

@router.message(Command('admin_stats'))
async def cmd_admin_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞–∑–∏–Ω–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("üö´ Access denied")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–∏–º –ª–æ–≥–∏–∫—É, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—ë –∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏)
    # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ª–æ–≥–∏–∫–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è –≤–µ–∑–¥–µ, –Ω–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.
    # –≠—Ç–æ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–±–Ω–æ–≤–ª—ë–Ω–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º: –∫–æ–º–∞–Ω–¥—ã / —Ä–∞–±–æ—Ç–∞—é—Ç, –Ω–æ –º–µ–Ω—é –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è.
    from src.database import async_session_maker
    async with async_session_maker() as session:
        # –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users = await session.execute(select(func.count(User.id)))
        total_users = total_users.scalar()
        # –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫
        total_bets = await session.execute(select(func.count(Bet.id)))
        total_bets = total_bets.scalar()
        # –û–±—ä—ë–º —Å—Ç–∞–≤–æ–∫
        total_wagered = await session.execute(select(func.sum(Bet.stake_cents)))
        total_wagered = total_wagered.scalar() or 0
        # –í—ã–ø–ª–∞—á–µ–Ω–æ
        total_payout = await session.execute(select(func.sum(Bet.payout_cents)))
        total_payout = total_payout.scalar() or 0
        # House edge
        house_edge = ((total_wagered - total_payout) / total_wagered * 100) if total_wagered > 0 else 0

        text = (
            f"üîß <b>–°—Ç–∞—Ç—É—Å –∫–∞–∑–∏–Ω–æ</b>\n"
            f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_users}\n"
            f"üé∞ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: {total_bets}\n"
            f"üí∞ –û–±—ä—ë–º —Å—Ç–∞–≤–æ–∫: ${total_wagered / 100:.2f}\n"
            f"üéÅ –í—ã–ø–ª–∞—á–µ–Ω–æ: ${total_payout / 100:.2f}\n"
            f"üìä House edge: {house_edge:.2f}%\n"
            f"‚öôÔ∏è –°–∏—Å—Ç–µ–º–∞: üü¢ Online"
        )
        await message.answer(text)
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≥—Ä—É–ø–ø–µ
        # if message.chat.type not in ['group', 'supergroup']:
        #     await message.answer("–ú–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
        # # –£–±—Ä–∞–Ω–æ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é


@router.message(Command('admin_credit'))
async def cmd_admin_credit(message: Message):
    """–ù–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("üö´ Access denied")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –≤—ã–ø–æ–ª–Ω–∏–º –ª–æ–≥–∏–∫—É, –Ω–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–µ—ë –∏ –Ω–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏)
    args = message.text.split()[1:]
    if len(args) < 2:
        await message.answer("Usage: /admin_credit [telegram_id] [amount]")
        return

    try:
        target_telegram_id = int(args[0])
        amount_dollars = float(args[1])
        amount_cents = int(amount_dollars * 100)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")
        return

    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == target_telegram_id)
        )
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return

        await wallet_service.credit(
            user.id,
            amount_cents,
            f'admin_credit:by_{message.from_user.id}'
        )
        await message.answer(
            f"‚úÖ –ù–∞—á–∏—Å–ª–µ–Ω–æ <b>${amount_dollars:.2f}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.first_name or user.telegram_id}"
        )
        # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –≥—Ä—É–ø–ø–µ
        # if message.chat.type not in ['group', 'supergroup']:
        #     await message.answer("–ú–µ–Ω—é:", reply_markup=get_main_menu_keyboard())
        # # –£–±—Ä–∞–Ω–æ: –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é
