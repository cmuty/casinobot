from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
import asyncio
import secrets
import random

from src.models import User
from src.services.wallet_service import wallet_service
from src.services.bet_service import bet_service
from src.services.rating_service import VIPService, CreditService, RatingService
from src.games.slots import SlotMachine
from src.games.dice import DiceGame
from src.games.roulette import RouletteGame
from src.games.mines import MinesGame
from src.games.rocket import RocketGame
from src.config import settings
from src.i18n.translator import translator
from src.states import RouletteStates, SlotsStates, DiceStates, MinesStates, RocketStates
# –ù–û–í–û–ï:
from src.services.personality_engine import PersonalityEngine
from src.services.rating_service import RatingService, VIPService
from src.utils.keyboards import get_games_keyboard
from src.utils.ban_check import check_if_banned

router = Router()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
def format_money(cents: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—É–º–º—É –≤ —Ü–µ–Ω—Ç–∞—Ö –≤ —Å—Ç—Ä–æ–∫—É –≤–∏–¥–∞ '1,234.56' (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö)"""
    dollars = cents / 100
    return f"{dollars:,.2f}" # –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–ø—è—Ç—É—é –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å —Ç—ã—Å—è—á –∏ 2 –∑–Ω–∞–∫–∞ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ü–µ–ª—ã—Ö —á–∏—Å–µ–ª (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —Å—Ç–∞–≤–∫–∏ –≤ —Ü–µ–Ω—Ç–∞—Ö, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
def format_number(num: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º–∏ —Ç—ã—Å—è—á"""
    return f"{num:,}"


async def process_game_result(user_id: int, stake_cents: int, win_amount: int, game_type: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏–≥—Ä—ã: –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∏ –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç VIP –±–æ–Ω—É—Å—ã"""
    vip_message = ""
    credit_message = ""
    
    if win_amount > 0:
        # –í—ã–∏–≥—Ä—ã—à - –ø—Ä–∏–º–µ–Ω—è–µ–º VIP –º–Ω–æ–∂–∏—Ç–µ–ª—å
        total_win, vip_message = await VIPService.apply_vip_multiplier(user_id, win_amount)
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –≤–æ–∑–≤—Ä–∞—Ç –∫—Ä–µ–¥–∏—Ç–æ–≤
        remaining_win, credit_message = await CreditService.auto_repay_from_winnings(user_id, total_win)
        
        # –ù–∞—á–∏—Å–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –≤—ã–∏–≥—Ä—ã—à–∞
        if remaining_win > 0:
            await wallet_service.credit(user_id, remaining_win, f"{game_type}_win")
        
        final_win_amount = total_win
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–π—Ç–∏–Ω–≥–∏
        await RatingService.update_user_rating(user_id, stake_cents, final_win_amount, 'daily')
        await RatingService.update_user_rating(user_id, stake_cents, final_win_amount, 'weekly')
        await RatingService.update_user_rating(user_id, stake_cents, final_win_amount, 'monthly')
        
    else:
        # –ü—Ä–æ–∏–≥—Ä—ã—à - –ø—Ä–∏–º–µ–Ω—è–µ–º VIP –≤–æ–∑–≤—Ä–∞—Ç
        cashback_amount, vip_message = await VIPService.apply_vip_cashback(user_id, stake_cents)
        final_win_amount = 0
    
    return final_win_amount, vip_message, credit_message


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò ---

@router.message(lambda message: message.text and message.text.startswith('/dice '))
async def cmd_dice_with_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /dice —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        stake_text = message.text.split(' ', 1)[1].strip()
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/dice 20</code>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='dice',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ë–æ—Ç –±—Ä–æ—Å–∞–µ—Ç
        bot_dice = await message.answer_dice(emoji='üé≤')
        await asyncio.sleep(1)

        # –ò–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç
        await message.answer("–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –±—Ä–æ—Å–∞—Ç—å! üé≤")
        player_dice = await message.answer_dice(emoji='üé≤')

        # –ñ–¥—ë–º –∞–Ω–∏–º–∞—Ü–∏—é
        await asyncio.sleep(4)

        bot_value = bot_dice.dice.value
        player_value = player_dice.dice.value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, –º–µ–Ω—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ
            if player_value <= bot_value:
                player_value = bot_value + 1
                if player_value > 6:  # –ú–∞–∫—Å–∏–º—É–º 6 –Ω–∞ –∫–æ—Å—Ç–∏
                    player_value = 6
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –º–µ–Ω—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–µ
            if player_value > bot_value:
                player_value = bot_value - 1
                if player_value < 1:  # –ú–∏–Ω–∏–º—É–º 1 –Ω–∞ –∫–æ—Å—Ç–∏
                    player_value = 1

        payout = DiceGame.calculate_payout(player_value, bot_value, stake_cents)


        


        result_str = f"bot:{bot_value},player:{player_value}"


        await bet_service.complete_bet(bet.id, result_str, payout)


        


        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç


        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'dice')


        


        new_balance = await wallet_service.get_balance(user.id)

        if player_value > bot_value:
            text = await PersonalityEngine.get_message('dice_win', user)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(final_payout)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        elif player_value == bot_value:
            text = f"ü§ù <b>–ù–ò–ß–¨–Ø!</b>\n\n"
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"ü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"‚Ü©Ô∏è –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: <b>${format_money(final_payout)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        else:
            text = await PersonalityEngine.get_message('dice_loss', user)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"


        await message.answer(text)


@router.message(lambda message: message.text and message.text.startswith('/slots '))
async def cmd_slots_with_stake(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /slots —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        stake_text = message.text.split(' ', 1)[1].strip()
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/slots 20</code>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='slots',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ê–Ω–∏–º–∞—Ü–∏—è
        animation_msg = await message.answer("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã... ü§û")
        await asyncio.sleep(2)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        server_seed = secrets.token_hex(32)
        client_seed = str(user.telegram_id)
        nonce = user.slots_nonce

        symbols = SlotMachine.spin(server_seed, client_seed, nonce)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            symbols = ['üçé', 'üçé', 'üçé']  # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ = –≤—ã–∏–≥—Ä—ã—à
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            symbols = ['üçé', 'üçä', 'üçá']  # –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã = –ø—Ä–æ–∏–≥—Ä—ã—à
        
        payout = SlotMachine.calculate_payout(symbols, stake_cents)

        user.slots_nonce += 1
        await session.commit()

        await bet_service.complete_bet(bet.id, ''.join(symbols), payout)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'slots')

        await animation_msg.delete()

        symbols_str = ' '.join(symbols)
        new_balance = await wallet_service.get_balance(user.id)

        if payout >= stake_cents * 100:
            text = await PersonalityEngine.get_message('jackpot', user)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"ü§ë –¢–´ –°–û–†–í–ê–õ –ö–£–®: <b>${format_money(payout)}</b>!\n\n"
            text += f"–≠—Ç–æ –≤ {format_number(payout // stake_cents)} —Ä–∞–∑ –±–æ–ª—å—à–µ —Å—Ç–∞–≤–∫–∏! üëë\n\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
        elif payout > stake_cents:
            multiplier = payout / stake_cents
            text = await PersonalityEngine.get_message('big_win', user, {'multiplier': multiplier})
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"üí∞ –¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${format_money(payout)}</b> (x{multiplier:.1f})!\n\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
        elif payout > 0:
            text = await PersonalityEngine.get_message('slots_partial_win', user, {'payout': format_money(payout)})
            if 'slots_partial_win' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                text = f"üòä <b>–ü–æ—á—Ç–∏!</b>\n\n"
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
                if message.chat.type in ['group', 'supergroup']:
                    text = f"@{message.from_user.username or message.from_user.first_name}, " + text
                text += f"üé∞ {symbols_str}\n\n"
                text += f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: <b>${format_money(payout)}</b>\n\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
                if message.chat.type in ['group', 'supergroup']:
                    text = f"@{message.from_user.username or message.from_user.first_name}, " + text
                text += f"\n\nüé∞ {symbols_str}\n\n"
                text += f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: <b>${format_money(payout)}</b>\n\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        else:
            text = await PersonalityEngine.get_message('slots_loss', user)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>\n\n"
            text += f"üçÄ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"

        await message.answer(text)


@router.message(lambda message: message.text and message.text.startswith('/roulette '))
async def cmd_roulette_with_stake(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /roulette —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ —Å—Ç–∞–≤–∫–∏ –∏ —Ü–≤–µ—Ç–∞/—á–∏—Å–ª–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        parts = message.text.split(' ')
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/roulette 20 red</code> –∏–ª–∏ <code>/roulette 20 –∫</code> –∏–ª–∏ <code>/roulette 20 5</code>")
            return
        
        stake_text = parts[1].strip()
        bet_on = parts[2].strip().lower()
        
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/roulette 20 red</code> –∏–ª–∏ <code>/roulette 20 –∫</code> –∏–ª–∏ <code>/roulette 20 5</code>")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ (—Ü–≤–µ—Ç –∏–ª–∏ —á–∏—Å–ª–æ)
    if bet_on.isdigit():
        bet_type = 'number'
        bet_value = int(bet_on)
        if not 1 <= bet_value <= 10:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ! –£–∫–∞–∂–∏ –æ—Ç 1 –¥–æ 10.")
            return
    elif bet_on in ['red', '–∫—Ä–∞—Å–Ω–æ–µ', 'r', '–∫', '–∫—Ä–∞—Å']:
        bet_type = 'red'
        bet_value = RouletteGame.RED_NUMBERS
    elif bet_on in ['black', '—á—ë—Ä–Ω–æ–µ', 'b', '—á', '—á–µ—Ä–Ω–æ–µ']:
        bet_type = 'black'
        bet_value = RouletteGame.BLACK_NUMBERS
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: —á–∏—Å–ª–æ (1-10), red, black, –∫ (–∫—Ä–∞—Å–Ω–æ–µ), —á (—á–µ—Ä–Ω–æ–µ)")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='roulette',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ê–Ω–∏–º–∞—Ü–∏—è
        try:
            animation_msg = await message.answer("üé∞ –†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è... üåÄ")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑-–∑–∞ flood control, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë
            animation_msg = None
        await asyncio.sleep(2.5)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç (—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        is_rigged = await is_user_rigged(message.from_user.id)
        is_unrigged = await is_user_unrigged(message.from_user.id)
        
        print(f"DEBUG: User {message.from_user.id}, bet_type: {bet_type}, is_rigged: {is_rigged}, is_unrigged: {is_unrigged}")
        
        if is_rigged:
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à
            if bet_type == "red":
                result_number = random.choice([1, 3, 5, 7, 9])  # –ö—Ä–∞—Å–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "black":
                result_number = random.choice([2, 4, 6, 8, 10])  # –ß–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "number":
                result_number = bet_value  # –¢–æ—á–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            elif bet_type == "even":
                result_number = random.choice([2, 4, 6, 8, 10])  # –ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "odd":
                result_number = random.choice([1, 3, 5, 7, 9])  # –ù–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "high":
                result_number = random.choice([6, 7, 8, 9, 10])  # –í—ã—Å–æ–∫–∏–µ —á–∏—Å–ª–∞
            elif bet_type == "low":
                result_number = random.choice([1, 2, 3, 4, 5])  # –ù–∏–∑–∫–∏–µ —á–∏—Å–ª–∞
            else:
                # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–≤–æ–∫ - –≤—ã–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ
                result_number = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        elif is_unrigged:
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à
            if bet_type == "red":
                result_number = random.choice([2, 4, 6, 8, 10])  # –ß–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "black":
                result_number = random.choice([1, 3, 5, 7, 9])  # –ö—Ä–∞—Å–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "number":
                result_number = random.choice([x for x in range(1, 11) if x != bet_value])  # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ
            elif bet_type == "even":
                result_number = random.choice([1, 3, 5, 7, 9])  # –ù–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "odd":
                result_number = random.choice([2, 4, 6, 8, 10])  # –ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "high":
                result_number = random.choice([1, 2, 3, 4, 5])  # –ù–∏–∑–∫–∏–µ —á–∏—Å–ª–∞
            elif bet_type == "low":
                result_number = random.choice([6, 7, 8, 9, 10])  # –í—ã—Å–æ–∫–∏–µ —á–∏—Å–ª–∞
            else:
                # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–≤–æ–∫ - –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ
                result_number = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        else:
            result_number = RouletteGame.spin()
        
        print(f"DEBUG: Final result_number: {result_number}")
        
        result_color = RouletteGame.get_color(result_number)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
        payout = RouletteGame.calculate_payout(bet_type, bet_value, result_number, stake_cents)

        result_str = f"number:{result_number},color:{result_color}"
        await bet_service.complete_bet(bet.id, result_str, payout)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'roulette')

        await animation_msg.delete()

        color_emoji = 'üî¥' if result_color == 'red' else '‚ö´'
        new_balance = await wallet_service.get_balance(user.id)

        if final_payout > 0:
            multiplier = final_payout / stake_cents
            text = await PersonalityEngine.get_message('big_win', user, {'multiplier': multiplier})
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nüéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
            text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(final_payout)}</b> (x{multiplier:.1f})\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        else:
            text = await PersonalityEngine.get_message('roulette_loss', user)
            if 'roulette_loss' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                text = f"üíî <b>–ù–µ —É–≥–∞–¥–∞–ª...</b>\n\n"
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
                if message.chat.type in ['group', 'supergroup']:
                    text = f"@{message.from_user.username or message.from_user.first_name}, " + text
                text += f"üéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
                text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
                if message.chat.type in ['group', 'supergroup']:
                    text = f"@{message.from_user.username or message.from_user.first_name}, " + text
                text += f"\n\nüéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
                text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"

        await message.answer(text)


# --- –†–£–°–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –° –ü–ê–†–ê–ú–ï–¢–†–ê–ú–ò ---

# /—Ä—É–ª–µ—Ç–∫–∞ - –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ —Å–ª—ç—à–∞
@router.message(lambda message: message.text and message.text.startswith('/—Ä—É–ª–µ—Ç–∫–∞ '))
async def cmd_roulette_ru_with_stake(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É /—Ä—É–ª–µ—Ç–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏"""
    # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    text_without_slash = message.text[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª (/)
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    import types
    temp_msg = types.SimpleNamespace()
    temp_msg.text = text_without_slash
    temp_msg.from_user = message.from_user
    temp_msg.chat = message.chat
    temp_msg.answer = message.answer
    temp_msg.answer_dice = message.answer_dice
    await text_roulette_with_params(temp_msg)

# /—Å–ª–æ—Ç—ã - –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ —Å–ª—ç—à–∞
@router.message(lambda message: message.text and message.text.startswith('/—Å–ª–æ—Ç—ã '))
async def cmd_slots_ru_with_stake(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É /—Å–ª–æ—Ç—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç–∞–≤–∫–∏"""
    text_without_slash = message.text[1:]
    import types
    temp_msg = types.SimpleNamespace()
    temp_msg.text = text_without_slash
    temp_msg.from_user = message.from_user
    temp_msg.chat = message.chat
    temp_msg.answer = message.answer
    await text_slots_with_params(temp_msg)

# /–∫–æ—Å—Ç–∏ - –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ —Å–ª—ç—à–∞
@router.message(lambda message: message.text and message.text.startswith('/–∫–æ—Å—Ç–∏ '))
async def cmd_dice_ru_with_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É /–∫–æ—Å—Ç–∏ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç–∞–≤–∫–∏"""
    text_without_slash = message.text[1:]
    import types
    temp_msg = types.SimpleNamespace()
    temp_msg.text = text_without_slash
    temp_msg.from_user = message.from_user
    temp_msg.chat = message.chat
    temp_msg.answer = message.answer
    temp_msg.answer_dice = message.answer_dice
    await text_dice_with_params(temp_msg, state)

# /–º–∏–Ω—ã - –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –±–µ–∑ —Å–ª—ç—à–∞
@router.message(lambda message: message.text and message.text.startswith('/–º–∏–Ω—ã '))
async def cmd_mines_ru_with_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É /–º–∏–Ω—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç–∞–≤–∫–∏"""
    text_without_slash = message.text[1:]
    import types
    temp_msg = types.SimpleNamespace()
    temp_msg.text = text_without_slash
    temp_msg.from_user = message.from_user
    temp_msg.chat = message.chat
    temp_msg.answer = message.answer
    await text_mines_with_params(temp_msg, state)


# --- –¢–ï–ö–°–¢–û–í–´–ï –ö–û–ú–ê–ù–î–´ –ë–ï–ó –°–õ–≠–®–ê (–¥–ª—è –≥—Ä—É–ø–ø –∏ –õ–°) ---

# —Ä—É–ª–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞] [—Ü–≤–µ—Ç/—á–∏—Å–ª–æ]
@router.message(lambda message: message.text and message.text.lower().startswith('—Ä—É–ª–µ—Ç–∫–∞ '))
async def text_roulette_with_params(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É '—Ä—É–ª–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞] [—Ü–≤–µ—Ç/—á–∏—Å–ª–æ]' –±–µ–∑ —Å–ª—ç—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
        parts = message.text.split(' ')
        if len(parts) < 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>—Ä—É–ª–µ—Ç–∫–∞ 20 red</code> –∏–ª–∏ <code>—Ä—É–ª–µ—Ç–∫–∞ 20 –∫</code> –∏–ª–∏ <code>—Ä—É–ª–µ—Ç–∫–∞ 20 5</code>")
            return
        
        stake_text = parts[1].strip()
        bet_on = parts[2].strip().lower()
        
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>—Ä—É–ª–µ—Ç–∫–∞ 20 red</code> –∏–ª–∏ <code>—Ä—É–ª–µ—Ç–∫–∞ 20 –∫</code> –∏–ª–∏ <code>—Ä—É–ª–µ—Ç–∫–∞ 20 5</code>")
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞ (—Ü–≤–µ—Ç –∏–ª–∏ —á–∏—Å–ª–æ)
    if bet_on.isdigit():
        bet_type = 'number'
        bet_value = int(bet_on)
        if not 1 <= bet_value <= 10:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ! –£–∫–∞–∂–∏ –æ—Ç 1 –¥–æ 10.")
            return
    elif bet_on in ['red', '–∫—Ä–∞—Å–Ω–æ–µ', 'r', '–∫', '–∫—Ä–∞—Å']:
        bet_type = 'red'
        bet_value = RouletteGame.RED_NUMBERS
    elif bet_on in ['black', '—á—ë—Ä–Ω–æ–µ', 'b', '—á', '—á–µ—Ä–Ω–æ–µ']:
        bet_type = 'black'
        bet_value = RouletteGame.BLACK_NUMBERS
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: —á–∏—Å–ª–æ (1-10), red, black, –∫ (–∫—Ä–∞—Å–Ω–æ–µ), —á (—á–µ—Ä–Ω–æ–µ)")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='roulette',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ê–Ω–∏–º–∞—Ü–∏—è
        try:
            animation_msg = await message.answer("üé∞ –†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è... üåÄ")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑-–∑–∞ flood control, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë
            animation_msg = None
        await asyncio.sleep(2.5)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç (—Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 10)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        is_rigged = await is_user_rigged(message.from_user.id)
        is_unrigged = await is_user_unrigged(message.from_user.id)
        
        print(f"DEBUG: User {message.from_user.id}, bet_type: {bet_type}, is_rigged: {is_rigged}, is_unrigged: {is_unrigged}")
        
        if is_rigged:
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à
            if bet_type == "red":
                result_number = random.choice([1, 3, 5, 7, 9])  # –ö—Ä–∞—Å–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "black":
                result_number = random.choice([2, 4, 6, 8, 10])  # –ß–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "number":
                result_number = bet_value  # –¢–æ—á–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ
            elif bet_type == "even":
                result_number = random.choice([2, 4, 6, 8, 10])  # –ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "odd":
                result_number = random.choice([1, 3, 5, 7, 9])  # –ù–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "high":
                result_number = random.choice([6, 7, 8, 9, 10])  # –í—ã—Å–æ–∫–∏–µ —á–∏—Å–ª–∞
            elif bet_type == "low":
                result_number = random.choice([1, 2, 3, 4, 5])  # –ù–∏–∑–∫–∏–µ —á–∏—Å–ª–∞
            else:
                # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–≤–æ–∫ - –≤—ã–±–∏—Ä–∞–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ
                result_number = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        elif is_unrigged:
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à
            if bet_type == "red":
                result_number = random.choice([2, 4, 6, 8, 10])  # –ß–µ—Ä–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "black":
                result_number = random.choice([1, 3, 5, 7, 9])  # –ö—Ä–∞—Å–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "number":
                result_number = random.choice([x for x in range(1, 11) if x != bet_value])  # –õ—é–±–æ–µ –¥—Ä—É–≥–æ–µ —á–∏—Å–ª–æ
            elif bet_type == "even":
                result_number = random.choice([1, 3, 5, 7, 9])  # –ù–µ—á–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "odd":
                result_number = random.choice([2, 4, 6, 8, 10])  # –ß–µ—Ç–Ω—ã–µ —á–∏—Å–ª–∞
            elif bet_type == "high":
                result_number = random.choice([1, 2, 3, 4, 5])  # –ù–∏–∑–∫–∏–µ —á–∏—Å–ª–∞
            elif bet_type == "low":
                result_number = random.choice([6, 7, 8, 9, 10])  # –í—ã—Å–æ–∫–∏–µ —á–∏—Å–ª–∞
            else:
                # –î–ª—è –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å—Ç–∞–≤–æ–∫ - –≤—ã–±–∏—Ä–∞–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–µ —á–∏—Å–ª–æ
                result_number = random.choice([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])
        else:
            result_number = RouletteGame.spin()
        
        print(f"DEBUG: Final result_number: {result_number}")
        
        result_color = RouletteGame.get_color(result_number)

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—ã–±–æ—Ä–∞ –∏–≥—Ä–æ–∫–∞
        payout = RouletteGame.calculate_payout(bet_type, bet_value, result_number, stake_cents)

        result_str = f"number:{result_number},color:{result_color}"
        await bet_service.complete_bet(bet.id, result_str, payout)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'roulette')

        await animation_msg.delete()

        color_emoji = 'üî¥' if result_color == 'red' else '‚ö´'
        new_balance = await wallet_service.get_balance(user.id)

        if final_payout > 0:
            multiplier = final_payout / stake_cents
            text = await PersonalityEngine.get_message('big_win', user, {'multiplier': multiplier})
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nüéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
            text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(final_payout)}</b> (x{multiplier:.1f})\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        else:
            text = await PersonalityEngine.get_message('roulette_loss', user)
            if 'roulette_loss' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                text = f"üíî <b>–ù–µ —É–≥–∞–¥–∞–ª...</b>\n\n"
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
                if message.chat.type in ['group', 'supergroup']:
                    text = f"@{message.from_user.username or message.from_user.first_name}, " + text
                text += f"üéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
                text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
                if message.chat.type in ['group', 'supergroup']:
                    text = f"@{message.from_user.username or message.from_user.first_name}, " + text
                text += f"\n\nüéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
                text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"

        await message.answer(text)

# —Å–ª–æ—Ç—ã [—Å—Ç–∞–≤–∫–∞]
@router.message(lambda message: message.text and message.text.lower().startswith('—Å–ª–æ—Ç—ã '))
async def text_slots_with_params(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É '—Å–ª–æ—Ç—ã [—Å—Ç–∞–≤–∫–∞]' –±–µ–∑ —Å–ª—ç—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
        stake_text = message.text.split(' ', 1)[1].strip()
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>—Å–ª–æ—Ç—ã 20</code>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='slots',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ê–Ω–∏–º–∞—Ü–∏—è
        animation_msg = await message.answer("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã... ü§û")
        await asyncio.sleep(2)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        server_seed = secrets.token_hex(32)
        client_seed = str(user.telegram_id)
        nonce = user.slots_nonce

        symbols = SlotMachine.spin(server_seed, client_seed, nonce)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            symbols = ['üçé', 'üçé', 'üçé']  # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ = –≤—ã–∏–≥—Ä—ã—à
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            symbols = ['üçé', 'üçä', 'üçá']  # –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã = –ø—Ä–æ–∏–≥—Ä—ã—à
        
        payout = SlotMachine.calculate_payout(symbols, stake_cents)

        user.slots_nonce += 1
        await session.commit()

        await bet_service.complete_bet(bet.id, ''.join(symbols), payout)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'slots')

        await animation_msg.delete()

        symbols_str = ' '.join(symbols)
        new_balance = await wallet_service.get_balance(user.id)

        if payout >= stake_cents * 100:
            text = await PersonalityEngine.get_message('jackpot', user)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"ü§ë –¢–´ –°–û–†–í–ê–õ –ö–£–®: <b>${format_money(payout)}</b>!\n\n"
            text += f"–≠—Ç–æ –≤ {format_number(payout // stake_cents)} —Ä–∞–∑ –±–æ–ª—å—à–µ —Å—Ç–∞–≤–∫–∏! üëë\n\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
        elif payout > stake_cents:
            multiplier = payout / stake_cents
            text = await PersonalityEngine.get_message('big_win', user, {'multiplier': multiplier})
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"üí∞ –¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${format_money(payout)}</b> (x{multiplier:.1f})!\n\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
        elif payout > 0:
            text = await PersonalityEngine.get_message('slots_partial_win', user, {'payout': format_money(payout)})
            if 'slots_partial_win' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                text = f"üòä <b>–ü–æ—á—Ç–∏!</b>\n\n"
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
                if message.chat.type in ['group', 'supergroup']:
                    text = f"@{message.from_user.username or message.from_user.first_name}, " + text
                text += f"üé∞ {symbols_str}\n\n"
                text += f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: <b>${format_money(payout)}</b>\n\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
                if message.chat.type in ['group', 'supergroup']:
                    text = f"@{message.from_user.username or message.from_user.first_name}, " + text
                text += f"\n\nüé∞ {symbols_str}\n\n"
                text += f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: <b>${format_money(payout)}</b>\n\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        else:
            text = await PersonalityEngine.get_message('slots_loss', user)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>\n\n"
            text += f"üçÄ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"

        await message.answer(text)

# –∫–æ—Å—Ç–∏ [—Å—Ç–∞–≤–∫–∞]
@router.message(lambda message: message.text and message.text.lower().startswith('–∫–æ—Å—Ç–∏ '))
async def text_dice_with_params(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É '–∫–æ—Å—Ç–∏ [—Å—Ç–∞–≤–∫–∞]' –±–µ–∑ —Å–ª—ç—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
        stake_text = message.text.split(' ', 1)[1].strip()
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–∫–æ—Å—Ç–∏ 20</code>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='dice',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ë–æ—Ç –±—Ä–æ—Å–∞–µ—Ç
        bot_dice = await message.answer_dice(emoji='üé≤')
        await asyncio.sleep(1)

        # –ò–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç
        await message.answer("–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –±—Ä–æ—Å–∞—Ç—å! üé≤")
        player_dice = await message.answer_dice(emoji='üé≤')

        # –ñ–¥—ë–º –∞–Ω–∏–º–∞—Ü–∏—é
        await asyncio.sleep(4)

        bot_value = bot_dice.dice.value
        player_value = player_dice.dice.value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, –º–µ–Ω—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ
            if player_value <= bot_value:
                player_value = bot_value + 1
                if player_value > 6:  # –ú–∞–∫—Å–∏–º—É–º 6 –Ω–∞ –∫–æ—Å—Ç–∏
                    player_value = 6
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –º–µ–Ω—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–µ
            if player_value > bot_value:
                player_value = bot_value - 1
                if player_value < 1:  # –ú–∏–Ω–∏–º—É–º 1 –Ω–∞ –∫–æ—Å—Ç–∏
                    player_value = 1

        payout = DiceGame.calculate_payout(player_value, bot_value, stake_cents)


        


        result_str = f"bot:{bot_value},player:{player_value}"


        await bet_service.complete_bet(bet.id, result_str, payout)


        


        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç


        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'dice')


        


        new_balance = await wallet_service.get_balance(user.id)

        if player_value > bot_value:
            text = await PersonalityEngine.get_message('dice_win', user)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(final_payout)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        elif player_value == bot_value:
            text = f"ü§ù <b>–ù–ò–ß–¨–Ø!</b>\n\n"
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"ü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"‚Ü©Ô∏è –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: <b>${format_money(final_payout)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            if credit_message:
                text += f"{credit_message}\n"
        else:
            text = await PersonalityEngine.get_message('dice_loss', user)
            # –î–æ–±–∞–≤–ª—è–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                text = f"@{message.from_user.username or message.from_user.first_name}, " + text
            text += f"\n\nü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"

        await message.answer(text)

# –º–∏–Ω—ã [—Å—Ç–∞–≤–∫–∞]
@router.message(lambda message: message.text and message.text.lower().startswith('–º–∏–Ω—ã '))
async def text_mines_with_params(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É '–º–∏–Ω—ã [—Å—Ç–∞–≤–∫–∞]' –±–µ–∑ —Å–ª—ç—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
        stake_text = message.text.split(' ', 1)[1].strip()
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>–º–∏–Ω—ã 20</code>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='mines',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω—ã
        mines_nonce = getattr(user, 'mines_nonce', 0)
        mines = MinesGame.generate_mines(user.id, mines_nonce)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –º–∏–Ω—ã (–∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç)
            mines = []
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—ã –≤–æ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ (–∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç)
            mines = list(range(25))  # –í—Å–µ 25 –∫–ª–µ—Ç–æ–∫ - –º–∏–Ω—ã
        
        if hasattr(user, 'mines_nonce'):
            user.mines_nonce += 1
        await session.commit()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 5x5
        keyboard = create_mines_keyboard()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            bet_id=bet.id,
            stake_cents=stake_cents,
            mines=mines,
            opened_cells=[],
            moves_count=0,
            user_id=user.id
        )
        await state.set_state(MinesStates.playing)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
        if message.chat.type in ['group', 'supergroup']:
            username = message.from_user.username or message.from_user.first_name
            text = f"@{username}, –≤—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ!\n\n"
        else:
            text = f"üí£ <b>–ú–∏–Ω—ã</b>\n\n"
        text += f"üí∞ –°—Ç–∞–≤–∫–∞: ${format_money(stake_cents)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:"

        await message.answer(text, reply_markup=keyboard)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö –ß–ò–°–õ–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô –î–õ–Ø –ì–†–£–ü–ü ---
@router.message(lambda message: message.text and message.text.replace('.', '').replace(',', '').isdigit())
async def handle_numeric_messages(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —á–∏—Å–ª–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö –¥–ª—è –∏–≥—Ä"""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    current_state = await state.get_state()
    print(f"DEBUG: Numeric message '{message.text}' from user {message.from_user.id} in chat {message.chat.id}")
    print(f"DEBUG: Current FSM state: {current_state}")
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–¥–º–∏–Ω–∫–∏ —Å—Ä–∞–±–æ—Ç–∞–ª–∏
    if current_state and current_state.startswith('AdminStates:'):
        print(f"DEBUG: User in admin state, skipping numeric handler")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM
    if current_state == DiceStates.choosing_stake:
        print(f"DEBUG: Processing dice stake for user {message.from_user.id}")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ—Å—Ç–µ–π
        await process_dice_stake(message, state)
    elif current_state == SlotsStates.choosing_stake:
        print(f"DEBUG: Processing slots stake for user {message.from_user.id}")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤
        await process_slots_stake(message, state)
    elif current_state == RouletteStates.choosing_stake:
        print(f"DEBUG: Processing roulette stake for user {message.from_user.id}")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏
        await process_roulette_stake(message, state)
    elif current_state == RouletteStates.choosing_bet:
        print(f"DEBUG: Processing roulette bet for user {message.from_user.id}")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –≤ —Ä—É–ª–µ—Ç–∫–µ
        await process_roulette_choice(message, state)
    elif current_state == MinesStates.choosing_stake:
        print(f"DEBUG: Processing mines stake for user {message.from_user.id}")
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –º–∏–Ω—ã
        await process_mines_stake(message, state)
    elif current_state == RocketStates.choosing_stake:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä–∞–∫–µ—Ç–∫–∏
        await process_rocket_stake(message, state)
    else:
        print(f"DEBUG: No active FSM state for user {message.from_user.id}, ignoring message")


# --- /slots (–∏ üé∞ –°–ª–æ—Ç—ã –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä) ---

@router.message(Command('slots'))
async def cmd_slots(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–ª—è —Å–ª–æ—Ç–æ–≤ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /slots"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if message.chat.type in ['group', 'supergroup']:
        # –í –≥—Ä—É–ø–ø–∞—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await message.answer(
            "üé∞ <b>–°–ª–æ—Ç—ã</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —Å—É–º–º–æ–π —Å—Ç–∞–≤–∫–∏:\n"
            "<code>/slots 10</code> –∏–ª–∏ <code>/—Å–ª–æ—Ç—ã 10</code> - —Å—Ç–∞–≤–∫–∞ $10\n"
            "<code>/slots 25</code> –∏–ª–∏ <code>/—Å–ª–æ—Ç—ã 25</code> - —Å—Ç–∞–≤–∫–∞ $25\n"
            "<code>/slots 50</code> –∏–ª–∏ <code>/—Å–ª–æ—Ç—ã 50</code> - —Å—Ç–∞–≤–∫–∞ $50\n\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $1\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $1000"
        )
    else:
        # –í –õ–° - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∫ –±—ã–ª–æ)
        await state.clear()
        await message.answer("üé∞ <b>–°–ª–æ—Ç—ã</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")
        await state.set_state(SlotsStates.choosing_stake)

# –¢–ï–ö–°–¢–û–í–´–ô –¢–†–ò–ì–ì–ï–† –¥–ª—è —Å–ª–æ—Ç–æ–≤ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(lambda message: message.text == 'üé∞ –°–ª–æ—Ç—ã')
async def trigger_slots(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä 'üé∞ –°–ª–æ—Ç—ã'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    # –ï—Å–ª–∏ –õ–° - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    await state.clear()
    await message.answer("üé∞ <b>–°–ª–æ—Ç—ã</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10):")
    await state.set_state(SlotsStates.choosing_stake)


# --- /dice (–∏ üé≤ –ö–æ—Å—Ç–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä) ---

@router.message(Command('dice'))
async def cmd_dice(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–ª—è –∫–æ—Å—Ç–µ–π —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /dice"""
    print(f"DEBUG: cmd_dice called for user {message.from_user.id} in chat {message.chat.id}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if message.chat.type in ['group', 'supergroup']:
        # –í –≥—Ä—É–ø–ø–∞—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await message.answer(
            "üé≤ <b>–î—É—ç–ª—å –Ω–∞ –∫–æ—Å—Ç—è—Ö</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É —Å —Å—É–º–º–æ–π —Å—Ç–∞–≤–∫–∏:\n"
            "<code>/dice 20</code> –∏–ª–∏ <code>/–∫–æ—Å—Ç–∏ 20</code> - —Å—Ç–∞–≤–∫–∞ $20\n"
            "<code>/dice 50</code> –∏–ª–∏ <code>/–∫–æ—Å—Ç–∏ 50</code> - —Å—Ç–∞–≤–∫–∞ $50\n"
            "<code>/dice 100</code> –∏–ª–∏ <code>/–∫–æ—Å—Ç–∏ 100</code> - —Å—Ç–∞–≤–∫–∞ $100\n\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $1\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $1000"
        )
    else:
        # –í –õ–° - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∫ –±—ã–ª–æ)
        await state.clear()
        print(f"DEBUG: Setting DiceStates.choosing_stake for user {message.from_user.id} in chat {message.chat.id}")
        await message.answer("üé≤ <b>–î—É—ç–ª—å –Ω–∞ –∫–æ—Å—Ç—è—Ö</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")
        await state.set_state(DiceStates.choosing_stake)

# –¢–ï–ö–°–¢–û–í–´–ô –¢–†–ò–ì–ì–ï–† –¥–ª—è –∫–æ—Å—Ç–µ–π - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(lambda message: message.text == 'üé≤ –ö–æ—Å—Ç–∏')
async def trigger_dice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä 'üé≤ –ö–æ—Å—Ç–∏'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    # –ï—Å–ª–∏ –õ–° - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    await state.clear()
    await message.answer("üé≤ <b>–î—É—ç–ª—å –Ω–∞ –∫–æ—Å—Ç—è—Ö</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")
    await state.set_state(DiceStates.choosing_stake)


# --- /roulette (–∏ ‚ô†Ô∏è –†—É–ª–µ—Ç–∫–∞ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä) ---

@router.message(Command('roulette'))
async def cmd_roulette(message: Message, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Å—Ç–∞–≤–∫—É –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /roulette"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
    if message.chat.type in ['group', 'supergroup']:
        # –í –≥—Ä—É–ø–ø–∞—Ö - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        await message.answer(
            "‚ô†Ô∏è <b>–ú–∏–Ω–∏-—Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
            "<code>/roulette [—Å—Ç–∞–≤–∫–∞] [—Ü–≤–µ—Ç/—á–∏—Å–ª–æ]</code>\n\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "‚îú <code>/roulette 20 red</code> –∏–ª–∏ <code>/—Ä—É–ª–µ—Ç–∫–∞ 20 –∫</code>\n"
            "‚îú <code>/roulette 50 black</code> –∏–ª–∏ <code>/—Ä—É–ª–µ—Ç–∫–∞ 50 —á</code>\n"
            "‚îî <code>/roulette 100 5</code> - —Å—Ç–∞–≤–∫–∞ –Ω–∞ —á–∏—Å–ª–æ\n\n"
            "üî¥ –ö—Ä–∞—Å–Ω–æ–µ (red, –∫): x1.8\n"
            "‚ö´ –ß–µ—Ä–Ω–æ–µ (black, —á): x1.8\n"
            "üéØ –ß–∏—Å–ª–æ (1-10): x3\n\n"
            "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $1\n"
            "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: $1000"
        )
    else:
        # –í –õ–° - –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º (–∫–∞–∫ –±—ã–ª–æ)
        await state.clear()
        await message.answer("‚ô†Ô∏è <b>–ú–∏–Ω–∏-—Ä—É–ª–µ—Ç–∫–∞</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")
        await state.set_state(RouletteStates.choosing_stake)

# –¢–ï–ö–°–¢–û–í–´–ô –¢–†–ò–ì–ì–ï–† –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(lambda message: message.text == '‚ô†Ô∏è –†—É–ª–µ—Ç–∫–∞')
async def trigger_roulette(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä '‚ô†Ô∏è –†—É–ª–µ—Ç–∫–∞'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    # –ï—Å–ª–∏ –õ–° - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    await state.clear()
    await message.answer("‚ô†Ô∏è <b>–ú–∏–Ω–∏-—Ä—É–ª–µ—Ç–∫–∞</b>\n–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):")
    await state.set_state(RouletteStates.choosing_stake)


# --- –†–£–°–°–ö–ò–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –õ–ò–ß–ù–´–• –°–û–û–ë–©–ï–ù–ò–ô ---

@router.message(Command('—Å–ª–æ—Ç—ã'))
async def cmd_slots_ru(message: Message, state: FSMContext):
    """–†—É—Å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /—Å–ª–æ—Ç—ã –¥–ª—è –õ–°"""
    await cmd_slots(message, state)

@router.message(Command('–∫–æ—Å—Ç–∏'))
async def cmd_dice_ru(message: Message, state: FSMContext):
    """–†—É—Å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /–∫–æ—Å—Ç–∏ –¥–ª—è –õ–°"""
    await cmd_dice(message, state)

@router.message(Command('—Ä—É–ª–µ—Ç–∫–∞'))
async def cmd_roulette_ru(message: Message, state: FSMContext):
    """–†—É—Å—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ /—Ä—É–ª–µ—Ç–∫–∞ –¥–ª—è –õ–°"""
    await cmd_roulette(message, state)


# --- FSM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
# –≠—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ù–ï –¥–æ–ª–∂–Ω—ã —Å—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø–∞—Ö, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ –∑–∞–≤–∏—Å—è—Ç –æ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
# –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤ –Ω–∞—á–∞–ª–æ –∫–∞–∂–¥–æ–≥–æ FSM-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –¥–ª—è –Ω–∞–¥—ë–∂–Ω–æ—Å—Ç–∏, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ FSM –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ FSM-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞—Ö - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –º–µ—Ä–∞.

@router.message(SlotsStates.choosing_stake)
async def process_slots_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Å–ª–æ—Ç–æ–≤ –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É"""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG: process_slots_stake called for user {message.from_user.id} in chat {message.chat.id}")
    print(f"DEBUG: Current state: {await state.get_state()}")
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É FSM
    try:
        stake_dollars = float(message.text)
        stake_cents = int(stake_dollars * 100)
    except ValueError:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('invalid_stake', user)
                # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if 'invalid_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
            else:
                text = "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        await message.answer(text)
        return

    if stake_cents < settings.MIN_BET:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('low_stake', user, {'min_bet': format_money(settings.MIN_BET)})
                # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if 'low_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}"
            else:
                text = f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}"
        await message.answer(text)
        return

    if stake_cents > settings.MAX_BET:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('high_stake', user, {'max_bet': format_money(settings.MAX_BET)})
                # –ï—Å–ª–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                if 'high_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}"
            else:
                text = f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}"
        await message.answer(text)
        return

    telegram_id = message.from_user.id
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            await state.clear()
            return

        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            await state.clear()
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='slots',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await state.clear()
            return

        # –ê–Ω–∏–º–∞—Ü–∏—è
        animation_msg = await message.answer("üé∞ –ö—Ä—É—Ç–∏–º –±–∞—Ä–∞–±–∞–Ω—ã... ü§û")
        await asyncio.sleep(2)

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        server_seed = secrets.token_hex(32)
        client_seed = str(user.telegram_id)
        nonce = user.slots_nonce

        symbols = SlotMachine.spin(server_seed, client_seed, nonce)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã—à
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—ã–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            symbols = ['üçé', 'üçé', 'üçé']  # –¢—Ä–∏ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö —Å–∏–º–≤–æ–ª–∞ = –≤—ã–∏–≥—Ä—ã—à
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã—à
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ–∏–≥—Ä—ã—à–Ω—É—é –∫–æ–º–±–∏–Ω–∞—Ü–∏—é
            symbols = ['üçé', 'üçä', 'üçá']  # –†–∞–∑–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã = –ø—Ä–æ–∏–≥—Ä—ã—à
        
        payout = SlotMachine.calculate_payout(symbols, stake_cents)

        user.slots_nonce += 1
        await session.commit()

        await bet_service.complete_bet(bet.id, ''.join(symbols), payout)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'slots')

        await animation_msg.delete()

        symbols_str = ' '.join(symbols)
        new_balance = await wallet_service.get_balance(user.id)

        if payout >= stake_cents * 100:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('jackpot', user)
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"ü§ë –¢–´ –°–û–†–í–ê–õ –ö–£–®: <b>${format_money(payout)}</b>!\n\n"
            text += f"–≠—Ç–æ –≤ {format_number(payout // stake_cents)} —Ä–∞–∑ –±–æ–ª—å—à–µ —Å—Ç–∞–≤–∫–∏! üëë\n\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
        elif payout > stake_cents:
            multiplier = payout / stake_cents
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('big_win', user, {'multiplier': multiplier})
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"üí∞ –¢—ã –≤—ã–∏–≥—Ä–∞–ª <b>${format_money(payout)}</b> (x{multiplier:.1f})!\n\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
        elif payout > 0:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('slots_partial_win', user, {'payout': format_money(payout)})
            # –ï—Å–ª–∏ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
            if 'slots_partial_win' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                text = f"üòä <b>–ü–æ—á—Ç–∏!</b>\n\n"
                text += f"üé∞ {symbols_str}\n\n"
                text += f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: <b>${format_money(payout)}</b>\n\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                text += f"\n\nüé∞ {symbols_str}\n\n"
                text += f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: <b>${format_money(payout)}</b>\n\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        else:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('slots_loss', user)
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
            text += f"\n\nüé∞ {symbols_str}\n\n"
            text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>\n\n"
            text += f"üçÄ –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!"

        await message.answer(text)
        await state.clear()


# --- FSM –¥–ª—è Dice ---
@router.message(DiceStates.choosing_stake)
async def process_dice_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–æ—Å—Ç–µ–π –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É"""
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print(f"DEBUG: process_dice_stake called for user {message.from_user.id} in chat {message.chat.id}")
    print(f"DEBUG: Current state: {await state.get_state()}")
    
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É FSM
    try:
        stake_dollars = float(message.text)
        stake_cents = int(stake_dollars * 100)
    except ValueError:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('invalid_stake', user)
                if 'invalid_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
            else:
                text = "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        await message.answer(text)
        return

    if stake_cents < settings.MIN_BET:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('low_stake', user, {'min_bet': format_money(settings.MIN_BET)})
                if 'low_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}"
            else:
                text = f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}"
        await message.answer(text)
        return

    if stake_cents > settings.MAX_BET:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('high_stake', user, {'max_bet': format_money(settings.MAX_BET)})
                if 'high_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}"
            else:
                text = f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}"
        await message.answer(text)
        return

    telegram_id = message.from_user.id
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            await state.clear()
            return

        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            await state.clear()
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='dice',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await state.clear()
            return

        # –ë–æ—Ç –±—Ä–æ—Å–∞–µ—Ç
        bot_dice = await message.answer_dice(emoji='üé≤')
        await asyncio.sleep(1)

        # –ò–≥—Ä–æ–∫ –±—Ä–æ—Å–∞–µ—Ç
        await message.answer("–¢–≤–æ—è –æ—á–µ—Ä–µ–¥—å –±—Ä–æ—Å–∞—Ç—å! üé≤")
        player_dice = await message.answer_dice(emoji='üé≤')

        # –ñ–¥—ë–º –∞–Ω–∏–º–∞—Ü–∏—é
        await asyncio.sleep(4)

        bot_value = bot_dice.dice.value
        player_value = player_dice.dice.value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É –¥–ª—è –∏–≥—Ä–æ–∫–∞
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç, –º–µ–Ω—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–∏–≥—Ä—ã—à–Ω–æ–µ
            if player_value <= bot_value:
                player_value = bot_value + 1
                if player_value > 6:  # –ú–∞–∫—Å–∏–º—É–º 6 –Ω–∞ –∫–æ—Å—Ç–∏
                    player_value = 6
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç
            # –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç, –º–µ–Ω—è–µ–º –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ–∏–≥—Ä—ã—à–Ω–æ–µ
            if player_value > bot_value:
                player_value = bot_value - 1
                if player_value < 1:  # –ú–∏–Ω–∏–º—É–º 1 –Ω–∞ –∫–æ—Å—Ç–∏
                    player_value = 1

        payout = DiceGame.calculate_payout(player_value, bot_value, stake_cents)


        


        result_str = f"bot:{bot_value},player:{player_value}"


        await bet_service.complete_bet(bet.id, result_str, payout)


        


        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç


        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'dice')


        


        new_balance = await wallet_service.get_balance(user.id)

        if player_value > bot_value:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('dice_win', user)
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
            text += f"\n\nü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(final_payout)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        elif player_value == bot_value:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–∏–º –µ–≥–æ –≤ NeutralPersonality)
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
            text = f"ü§ù <b>–ù–ò–ß–¨–Ø!</b>\n\n"
            text += f"ü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"‚Ü©Ô∏è –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: <b>${format_money(final_payout)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            if credit_message:
                text += f"{credit_message}\n"
        else:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('dice_loss', user)
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
            text += f"\n\nü§ñ –ë–æ—Ç: {bot_value}\n"
            text += f"üë§ –¢—ã: {player_value}\n\n"
            text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"

        await message.answer(text)
        await state.clear()


# --- FSM –¥–ª—è Roulette ---
@router.message(RouletteStates.choosing_stake)
async def process_roulette_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –¥–ª—è —Ä—É–ª–µ—Ç–∫–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≤—ã–±–æ—Ä (—á–∏—Å–ª–æ/—Ü–≤–µ—Ç)"""
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É FSM
    try:
        stake_dollars = float(message.text)
        stake_cents = int(stake_dollars * 100)
    except ValueError:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('invalid_stake', user)
                if 'invalid_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
            else:
                text = "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."
        await message.answer(text)
        return

    if stake_cents < settings.MIN_BET:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('low_stake', user, {'min_bet': format_money(settings.MIN_BET)})
                if 'low_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}"
            else:
                text = f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}"
        await message.answer(text)
        return

    if stake_cents > settings.MAX_BET:
        # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.telegram_id == message.from_user.id))
            user = result.scalar_one_or_none()
            if user:
                text = await PersonalityEngine.get_message('high_stake', user, {'max_bet': format_money(settings.MAX_BET)})
                if 'high_stake' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                    text = f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}"
            else:
                text = f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}"
        await message.answer(text)
        return

    telegram_id = message.from_user.id
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            await state.clear()
            return

        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            await state.clear()
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞–≤–∫—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(stake_cents=stake_cents)
        await message.answer(
            "üé∞ <b>–ú–∏–Ω–∏-—Ä—É–ª–µ—Ç–∫–∞</b>\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ:\n"
            "üìç –ß–∏—Å–ª–æ (1-10): x3\n"
            "üî¥ –ö—Ä–∞—Å–Ω–æ–µ (red, –∫, –∫—Ä–∞—Å): x1.8\n"
            "‚ö´ –ß—ë—Ä–Ω–æ–µ (black, —á, —á–µ—Ä–Ω–æ–µ): x1.8\n\n"
            "–ü—Ä–∏–º–µ—Ä: <code>5</code> –∏–ª–∏ <code>red</code> –∏–ª–∏ <code>–∫</code>"
        )
        await state.set_state(RouletteStates.choosing_bet)

@router.message(RouletteStates.choosing_bet)
async def process_roulette_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä (—á–∏—Å–ª–æ/—Ü–≤–µ—Ç) –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ —Ä—É–ª–µ—Ç–∫—É"""
    # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É FSM
    bet_on = message.text.lower().strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—ã–±–æ—Ä–∞
    if bet_on.isdigit():
        bet_type = 'number'
        bet_value = int(bet_on)
        if not 1 <= bet_value <= 10:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ —á–∏—Å–ª–æ! –£–∫–∞–∂–∏ –æ—Ç 1 –¥–æ 10.")
            return
    elif bet_on in ['red', '–∫—Ä–∞—Å–Ω–æ–µ', 'r', '–∫', '–∫—Ä–∞—Å']:
        bet_type = 'red'
        bet_value = RouletteGame.RED_NUMBERS
    elif bet_on in ['black', '—á—ë—Ä–Ω–æ–µ', 'b', '—á', '—á–µ—Ä–Ω–æ–µ']:
        bet_type = 'black'
        bet_value = RouletteGame.BLACK_NUMBERS
    else:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Ç–∞–≤–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π: —á–∏—Å–ª–æ (1-10), red, black, –∫ (–∫—Ä–∞—Å–Ω–æ–µ), —á (—á–µ—Ä–Ω–æ–µ)")
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—É—é —Å—Ç–∞–≤–∫—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    stake_cents = data.get('stake_cents')

    if stake_cents is None:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞–≤–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return

    telegram_id = message.from_user.id
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            await state.clear()
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ (–ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            await state.clear()
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='roulette',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            await state.clear()
            return

        # –ê–Ω–∏–º–∞—Ü–∏—è
        try:
            animation_msg = await message.answer("üé∞ –†—É–ª–µ—Ç–∫–∞ –∫—Ä—É—Ç–∏—Ç—Å—è... üåÄ")
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏—é –∏–∑-–∑–∞ flood control, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –Ω–µ—ë
            animation_msg = None
        await asyncio.sleep(2.5)

        # –†–µ–∑—É–ª—å—Ç–∞—Ç
        result_number = RouletteGame.spin()
        result_color = RouletteGame.get_color(result_number)

        payout = RouletteGame.calculate_payout(bet_type, bet_value, result_number, stake_cents)

        result_str = f"number:{result_number},color:{result_color}"
        await bet_service.complete_bet(bet.id, result_str, payout)

        # –ü—Ä–∏–º–µ–Ω—è–µ–º VIP –±–æ–Ω—É—Å—ã –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        final_payout, vip_message, credit_message = await process_game_result(user.id, stake_cents, payout, 'roulette')

        await animation_msg.delete()

        color_emoji = 'üî¥' if result_color == 'red' else '‚ö´'
        new_balance = await wallet_service.get_balance(user.id)

        if final_payout > 0:
            multiplier = final_payout / stake_cents
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, win –≤ —Ä—É–ª–µ—Ç–∫–µ)
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é big_win
            text = await PersonalityEngine.get_message('big_win', user, {'multiplier': multiplier})
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏
            text += f"\n\nüéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
            text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(final_payout)}</b> (x{multiplier:.1f})\n"
            if vip_message:
                text += f"{vip_message}\n"
            if credit_message:
                text += f"{credit_message}\n"
            text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
        else:
            # –ù–û–í–û–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, loss –≤ —Ä—É–ª–µ—Ç–∫–µ)
            # –ü–æ–∫–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å—é slots_loss
            text = await PersonalityEngine.get_message('roulette_loss', user) # –î–æ–±–∞–≤–∏–º –≤ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
            if 'roulette_loss' not in ['big_win', 'slots_loss', 'dice_win', 'dice_loss', 'jackpot', 'low_balance', 'daily_bonus', 'welcome_back', 'error_too_fast']:
                text = f"üíî <b>–ù–µ —É–≥–∞–¥–∞–ª...</b>\n\n"
                text += f"üéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
                text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            
            else:
                # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ—Ç–∞–ª–∏ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
                text += f"\n\nüéØ –í—ã–ø–∞–ª–æ: {color_emoji} <b>{result_number}</b>\n\n"
                text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
                if vip_message:
                    text += f"{vip_message}\n"
                if credit_message:
                    text += f"{credit_message}\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
            

        await message.answer(text)
        await state.clear()


# --- –ò–ì–†–ê –í –ú–ò–ù–´ ---

@router.message(lambda message: message.text and message.text.startswith('/mines '))
async def cmd_mines_with_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /mines —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç–∞–≤–∫–∏"""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        stake_text = message.text.split(' ', 1)[1].strip()
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/mines 20</code>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='mines',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω—ã
        mines_nonce = getattr(user, 'mines_nonce', 0)
        mines = MinesGame.generate_mines(user.id, mines_nonce)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –º–∏–Ω—ã (–∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç)
            mines = []
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—ã –≤–æ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ (–∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç)
            mines = list(range(25))  # –í—Å–µ 25 –∫–ª–µ—Ç–æ–∫ - –º–∏–Ω—ã
        
        if hasattr(user, 'mines_nonce'):
            user.mines_nonce += 1
        await session.commit()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 5x5
        keyboard = create_mines_keyboard()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            bet_id=bet.id,
            stake_cents=stake_cents,
            mines=mines,
            opened_cells=[],
            moves_count=0,
            user_id=user.id
        )
        await state.set_state(MinesStates.playing)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
        username = message.from_user.username or message.from_user.first_name
        text = f"@{username}, –≤—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ!\n\n"
        text += f"üí∞ –°—Ç–∞–≤–∫–∞: ${format_money(stake_cents)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:"

        await message.answer(text, reply_markup=keyboard)


def create_mines_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 5x5 –¥–ª—è –∏–≥—Ä—ã –≤ –º–∏–Ω—ã"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ 5x5
    for row in range(5):
        keyboard_row = []
        for col in range(5):
            button = InlineKeyboardButton(
                text="‚ùì",
                callback_data=f"mines_open_{row}_{col}"
            )
            keyboard_row.append(button)
        keyboard.append(keyboard_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    cancel_button = InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data="mines_cancel"
    )
    keyboard.append([cancel_button])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


@router.callback_query(lambda c: c.data.startswith('mines_'))
async def handle_mines_callback(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –≤ –∏–≥—Ä–µ –º–∏–Ω—ã"""
    await callback.answer()
    
    data = await state.get_data()
    bet_id = data.get('bet_id')
    stake_cents = data.get('stake_cents')
    mines = data.get('mines')
    opened_cells = data.get('opened_cells', [])
    moves_count = data.get('moves_count', 0)
    user_id = data.get('user_id')
    
    if not all([bet_id, stake_cents, mines, user_id]):
        await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.clear()
        return
    
    if callback.data == "mines_cancel":
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ—à–∏–ª –∑–∞–±—Ä–∞—Ç—å –≤—ã–∏–≥—Ä—ã—à
        if moves_count == 0:
            # –ï—Å–ª–∏ –Ω–µ —Å–¥–µ–ª–∞–ª –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ö–æ–¥–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–≤–∫—É
            payout = stake_cents
        else:
            # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–∏–≥—Ä—ã—à
            payout = MinesGame.calculate_payout(stake_cents, moves_count)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞–≤–∫—É
        await bet_service.complete_bet(bet_id, f"cancelled_after_{moves_count}_moves", payout)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            
            if user:
                new_balance = await wallet_service.get_balance(user.id)
                username = callback.from_user.username or callback.from_user.first_name
                
                if moves_count == 0:
                    text = f"@{username}, –∏–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n"
                    text += f"‚Ü©Ô∏è –°—Ç–∞–≤–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞: <b>${format_money(payout)}</b>\n"
                    text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
                else:
                    text = f"@{username}, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(payout)}</b>\n"
                    text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
                
                await callback.message.edit_text(text)
        
        await state.clear()
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–ª–µ—Ç–∫–∏
    if callback.data.startswith("mines_open_"):
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        coords = callback.data.replace("mines_open_", "").split("_")
        row, col = int(coords[0]), int(coords[1])
        position = MinesGame.coords_to_position(row, col)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç–∞ –ª–∏ —É–∂–µ —ç—Ç–∞ –∫–ª–µ—Ç–∫–∞
        if position in opened_cells:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∏–Ω–∞ –≤ —ç—Ç–æ–π –∫–ª–µ—Ç–∫–µ
        if position in mines:
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ø–∞–ª –Ω–∞ –º–∏–Ω—É - –ø—Ä–æ–∏–≥—Ä–∞–ª
            await bet_service.complete_bet(bet_id, f"lost_on_move_{moves_count + 1}", 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from src.database import async_session_maker
            async with async_session_maker() as session:
                result = await session.execute(select(User).where(User.id == user_id))
                user = result.scalar_one_or_none()
                
                if user:
                    new_balance = await wallet_service.get_balance(user.id)
                    username = callback.from_user.username or callback.from_user.first_name
                    
                    text = f"@{username}, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    text += f"üí∏ –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏\n"
                    text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –º–∏–Ω–∞–º–∏
                    final_keyboard = create_final_mines_keyboard(mines, opened_cells + [position])
                    await callback.message.edit_text(text, reply_markup=final_keyboard)
            
            await state.clear()
            return
        
        # –ö–ª–µ—Ç–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–∞ - –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
        opened_cells.append(position)
        moves_count += 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö–æ–¥–æ–≤ (–∑–∞—â–∏—Ç–∞ –æ—Ç –∞–±—É–∑–∞)
        if moves_count >= MinesGame.MAX_SAFE_MOVES:
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–º –≤—ã–∏–≥—Ä—ã—à–µ–º
            payout = MinesGame.calculate_payout(stake_cents, moves_count)
            await bet_service.complete_bet(bet_id, f"max_moves_reached_{moves_count}", payout)
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from src.database import async_session_maker
            async with async_session_maker() as session:
                result = await session.execute(select(User).where(User.id == user_id))
                user = result.scalar_one_or_none()
                
                if user:
                    new_balance = await wallet_service.get_balance(user.id)
                    username = callback.from_user.username or callback.from_user.first_name
                    
                    text = f"@{username}, –∏–≥—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
                    text += f"üéØ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º—É–º —Ö–æ–¥–æ–≤ ({MinesGame.MAX_SAFE_MOVES})\n"
                    text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(payout)}</b>\n"
                    text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –º–∏–Ω–∞–º–∏
                    final_keyboard = create_final_mines_keyboard(mines, opened_cells)
                    await callback.message.edit_text(text, reply_markup=final_keyboard)
            
            await state.clear()
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.update_data(
            opened_cells=opened_cells,
            moves_count=moves_count
        )
        
        # –°–æ–∑–¥–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        updated_keyboard = create_updated_mines_keyboard(opened_cells)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        username = callback.from_user.username or callback.from_user.first_name
        multiplier = MinesGame.get_multiplier(moves_count)
        text = f"@{username}, –≤—ã –Ω–∞—á–∞–ª–∏ –∏–≥—Ä—É –º–∏–Ω–Ω–æ–µ –ø–æ–ª–µ!\n\n"
        text += f"üí∞ –°—Ç–∞–≤–∫–∞: ${format_money(stake_cents)}\n"
        text += f"üéØ –•–æ–¥: {moves_count} | –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: x{multiplier:.1f}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:"
        
        await callback.message.edit_text(text, reply_markup=updated_keyboard)


def create_updated_mines_keyboard(opened_cells: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫–ª–µ—Ç–∫–∞–º–∏"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ 5x5
    for row in range(5):
        keyboard_row = []
        for col in range(5):
            position = MinesGame.coords_to_position(row, col)
            
            if position in opened_cells:
                # –û—Ç–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞ - –ø—É—Å—Ç–∞—è
                button = InlineKeyboardButton(
                    text="‚¨ú",
                    callback_data="mines_opened"
                )
            else:
                # –ó–∞–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞
                button = InlineKeyboardButton(
                    text="‚ùì",
                    callback_data=f"mines_open_{row}_{col}"
                )
            keyboard_row.append(button)
        keyboard.append(keyboard_row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    cancel_button = InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
        callback_data="mines_cancel"
    )
    keyboard.append([cancel_button])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def create_final_mines_keyboard(mines: list, opened_cells: list) -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –º–∏–Ω–∞–º–∏"""
    keyboard = []
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ 5x5
    for row in range(5):
        keyboard_row = []
        for col in range(5):
            position = MinesGame.coords_to_position(row, col)
            
            if position in mines:
                # –ú–∏–Ω–∞
                button = InlineKeyboardButton(
                    text="üí£",
                    callback_data="mines_final"
                )
            elif position in opened_cells:
                # –û—Ç–∫—Ä—ã—Ç–∞—è –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –∫–ª–µ—Ç–∫–∞
                button = InlineKeyboardButton(
                    text="‚¨ú",
                    callback_data="mines_final"
                )
            else:
                # –ó–∞–∫—Ä—ã—Ç–∞—è –∫–ª–µ—Ç–∫–∞ - –ø—É—Å—Ç–∞—è
                button = InlineKeyboardButton(
                    text="‚¨ú",
                    callback_data="mines_final"
                )
            keyboard_row.append(button)
        keyboard.append(keyboard_row)
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


# --- –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö –ò–ì–† ---

@router.message(lambda message: message.text == 'üé∞ –°–ª–æ—Ç—ã' and message.chat.type == 'private')
async def button_slots(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –°–ª–æ—Ç—ã"""
    if await check_if_banned(message):
        return
    await cmd_slots(message, state)


@router.message(lambda message: message.text == 'üé≤ –ö–æ—Å—Ç–∏' and message.chat.type == 'private')
async def button_dice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ö–æ—Å—Ç–∏"""
    if await check_if_banned(message):
        return
    await cmd_dice(message, state)


@router.message(lambda message: message.text == '‚ô†Ô∏è –†—É–ª–µ—Ç–∫–∞' and message.chat.type == 'private')
async def button_roulette(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†—É–ª–µ—Ç–∫–∞"""
    if await check_if_banned(message):
        return
    await cmd_roulette(message, state)


@router.message(lambda message: message.text == 'üí£ –ú–∏–Ω—ã' and message.chat.type == 'private')
async def button_mines(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ú–∏–Ω—ã"""
    if await check_if_banned(message):
        return
    # –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    await message.answer(
        "üí£ <b>–ú–∏–Ω—ã</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):"
    )
    await state.set_state(MinesStates.choosing_stake)


@router.message(lambda message: message.text == 'üöÄ –†–∞–∫–µ—Ç–∫–∞' and message.chat.type == 'private')
async def button_rocket(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –†–∞–∫–µ—Ç–∫–∞"""
    if await check_if_banned(message):
        return
    # –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    await message.answer(
        "üöÄ <b>–†–∞–∫–µ—Ç–∫–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å—Ç–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20):"
    )
    await state.set_state(RocketStates.choosing_stake)


async def process_mines_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ –º–∏–Ω—ã"""
    try:
        stake_dollars = float(message.text)
        stake_cents = int(stake_dollars * 100)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20)")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            await state.clear()
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='mines',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –º–∏–Ω—ã
        mines_nonce = getattr(user, 'mines_nonce', 0)
        mines = MinesGame.generate_mines(user.id, mines_nonce)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        if await is_user_rigged(message.from_user.id):
            # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - —É–±–∏—Ä–∞–µ–º –≤—Å–µ –º–∏–Ω—ã (–∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç)
            mines = []
        elif await is_user_unrigged(message.from_user.id):
            # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - –¥–æ–±–∞–≤–ª—è–µ–º –º–∏–Ω—ã –≤–æ –≤—Å–µ –∫–ª–µ—Ç–∫–∏ (–∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç)
            mines = list(range(25))  # –í—Å–µ 25 –∫–ª–µ—Ç–æ–∫ - –º–∏–Ω—ã
        
        if hasattr(user, 'mines_nonce'):
            user.mines_nonce += 1
        await session.commit()

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É 5x5
        keyboard = create_mines_keyboard()

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            bet_id=bet.id,
            stake_cents=stake_cents,
            mines=mines,
            opened_cells=[],
            moves_count=0,
            user_id=user.id
        )
        await state.set_state(MinesStates.playing)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–π
        text = f"üí£ <b>–ú–∏–Ω—ã</b>\n\n"
        text += f"üí∞ –°—Ç–∞–≤–∫–∞: ${format_money(stake_cents)}\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–µ—Ç–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è:"

        await message.answer(text, reply_markup=keyboard)


async def process_rocket_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–∞–≤–∫–∏ –¥–ª—è –∏–≥—Ä—ã –≤ —Ä–∞–∫–µ—Ç–∫—É"""
    try:
        stake_dollars = float(message.text)
        stake_cents = int(stake_dollars * 100)
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20)")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            await state.clear()
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='rocket',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        await start_rocket_game(message, state, bet.id, stake_cents, user)


# --- –ò–ì–†–ê –í –†–ê–ö–ï–¢–ö–£ (CRASH GAME) ---

# –ö–æ–º–∞–Ω–¥–∞: —Ä–∞–∫–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞]
@router.message(lambda message: message.text and message.text.lower().startswith('—Ä–∞–∫–µ—Ç–∫–∞ '))
async def text_rocket_with_params(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—É—é –∫–æ–º–∞–Ω–¥—É '—Ä–∞–∫–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞]' –±–µ–∑ —Å–ª—ç—à–∞"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞–ø—Ä—è–º—É—é
        stake_text = message.text.split(' ', 1)[1].strip()
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>—Ä–∞–∫–µ—Ç–∫–∞ 20</code>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='rocket',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        await start_rocket_game(message, state, bet.id, stake_cents, user)


# –ö–æ–º–∞–Ω–¥–∞: /—Ä–∞–∫–µ—Ç–∫–∞ [—Å—Ç–∞–≤–∫–∞]
@router.message(lambda message: message.text and message.text.startswith('/—Ä–∞–∫–µ—Ç–∫–∞ '))
async def cmd_rocket_ru_with_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä—É—Å—Å–∫—É—é –∫–æ–º–∞–Ω–¥—É /—Ä–∞–∫–µ—Ç–∫–∞ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç–∞–≤–∫–∏"""
    # –£–±–∏—Ä–∞–µ–º —Å–ª—ç—à –∏ –≤—ã–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    text_without_slash = message.text[1:]  # –£–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–π —Å–∏–º–≤–æ–ª (/)
    import types
    temp_msg = types.SimpleNamespace()
    temp_msg.text = text_without_slash
    temp_msg.from_user = message.from_user
    temp_msg.chat = message.chat
    temp_msg.answer = message.answer
    temp_msg.edit_text = message.edit_text if hasattr(message, 'edit_text') else None
    await text_rocket_with_params(temp_msg, state)


# –ö–æ–º–∞–Ω–¥–∞: /rocket [—Å—Ç–∞–≤–∫–∞]
@router.message(lambda message: message.text and message.text.startswith('/rocket '))
async def cmd_rocket_with_stake(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /rocket —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º —Å—Ç–∞–≤–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—É–º–º—É –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        stake_text = message.text.split(' ', 1)[1].strip()
        stake_dollars = float(stake_text)
        stake_cents = int(stake_dollars * 100)
    except (ValueError, IndexError):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <code>/rocket 20</code>")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç–∞–≤–∫–∏
        if stake_cents < settings.MIN_BET:
            await message.answer(f"üìâ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MIN_BET)}")
            return

        if stake_cents > settings.MAX_BET:
            await message.answer(f"üìà –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞ ‚Äî ${format_money(settings.MAX_BET)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        if balance < stake_cents:
            text = await PersonalityEngine.get_message('low_balance', user)
            await message.answer(text)
            return

        try:
            bet = await bet_service.create_bet(
                user_id=user.id,
                chat_id=message.chat.id,
                game_type='rocket',
                stake_cents=stake_cents
            )
        except ValueError as e:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return

        # –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É
        await start_rocket_game(message, state, bet.id, stake_cents, user)


async def start_rocket_game(message: Message, state: FSMContext, bet_id: int, stake_cents: int, user):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –∏–≥—Ä—É –≤ —Ä–∞–∫–µ—Ç–∫—É"""
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ—á–∫—É –∫—Ä–∞—à–∞
    crash_point = RocketGame.calculate_crash_point()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
    if await is_user_rigged(message.from_user.id):
        # –ü–æ–¥–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –≤—ã—Å–æ–∫—É—é —Ç–æ—á–∫—É –∫—Ä–∞—à–∞ (–∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç)
        crash_point = 999.99  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ –¥–æ—Å—Ç–∏—á—å
    elif await is_user_unrigged(message.from_user.id):
        # –û—Ç–∫—Ä—É—Ç–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—á–µ–Ω—å –Ω–∏–∑–∫—É—é —Ç–æ—á–∫—É –∫—Ä–∞—à–∞ (–∏–≥—Ä–æ–∫ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–µ—Ç)
        crash_point = 1.01  # –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ —Å—Ä–∞–∑—É –∫—Ä–∞—à
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö
    if message.chat.type in ['group', 'supergroup']:
        username = message.from_user.username or message.from_user.first_name
        user_mention = f"@{username}, "
    else:
        user_mention = ""
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    countdown_msg = await message.answer(f"{user_mention}üöÄ –ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã...")
    await asyncio.sleep(1)
    await countdown_msg.edit_text(f"{user_mention}üöÄ –ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
    await asyncio.sleep(1)
    await countdown_msg.edit_text(f"{user_mention}üöÄ –ò–≥—Ä–∞ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É...")
    await asyncio.sleep(1)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ó–∞–±—Ä–∞—Ç—å"
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ó–∞–±—Ä–∞—Ç—å", callback_data=f"rocket_cashout_{bet_id}")]
    ])
    
    # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = f"{user_mention}üöÄ <b>–†–∞–∫–µ—Ç–∫–∞</b>\n\n"
    text += f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>${format_money(stake_cents)}</b>\n"
    text += f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{RocketGame.format_multiplier(1.0)}</b>"
    
    game_msg = await countdown_msg.edit_text(text, reply_markup=keyboard)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        bet_id=bet_id,
        stake_cents=stake_cents,
        crash_point=crash_point,
        user_id=user.id,
        game_message_id=game_msg.message_id,
        chat_id=message.chat.id,
        cashed_out=False,
        user_mention=user_mention
    )
    await state.set_state(RocketStates.playing)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã –∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
    game_stopped = False
    game_locked = False
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é —Ä–∞–∫–µ—Ç—ã
    async def update_rocket(multiplier: float, is_crashed: bool):
        """Callback –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
        nonlocal game_stopped, game_locked
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É
            if game_locked:
                return False
            
            data = await state.get_data()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–∞–ª –ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä—ã—à –∏–ª–∏ –∏–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞
            if data.get('cashed_out', False) or game_stopped:
                game_stopped = True
                game_locked = True
                return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
            
            if not is_crashed:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å —Ç–µ–∫—É—â–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º
                rocket_emoji = RocketGame.get_rocket_emoji(multiplier)
                text = f"{data.get('user_mention', '')}üöÄ <b>–†–∞–∫–µ—Ç–∫–∞</b>\n\n"
                text += f"üí∞ –í–∞—à–∞ —Å—Ç–∞–≤–∫–∞: <b>${format_money(stake_cents)}</b>\n"
                text += f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{RocketGame.format_multiplier(multiplier)}</b> {rocket_emoji}"
                
                try:
                    await game_msg.edit_text(text, reply_markup=keyboard)
                except Exception:
                    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å)
                    pass
                return True  # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∏–≥—Ä—É
            else:
                # –†–∞–∫–µ—Ç–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å!
                if not data.get('cashed_out', False) and not game_stopped and not game_locked:
                    # –ë–ª–æ–∫–∏—Ä—É–µ–º –∏–≥—Ä—É –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –≤–∑—Ä—ã–≤–∞
                    game_locked = True
                    
                    # –ò–≥—Ä–æ–∫ –Ω–µ —É—Å–ø–µ–ª –∑–∞–±—Ä–∞—Ç—å - –ø—Ä–æ–∏–≥—Ä—ã—à
                    try:
                        await bet_service.complete_bet(bet_id, f"crashed_at_{crash_point}", 0)
                    except Exception:
                        # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
                        pass
                    
                    new_balance = await wallet_service.get_balance(user.id)
                    
                    text = f"{data.get('user_mention', '')}üí• <b>–†–∞–∫–µ—Ç–∫–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å!</b>\n\n"
                    text += f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∫—Ä–∞—à–∞: <b>{RocketGame.format_multiplier(crash_point)}</b>\n\n"
                    text += f"üí∏ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stake_cents)}</b>\n"
                    text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
                    
                    await game_msg.edit_text(text)
                    await state.clear()
                    game_stopped = True
                return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
        
        except Exception as e:
            game_stopped = True
            game_locked = True
            return False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–≥—Ä—É
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é
    await RocketGame.simulate_rocket(crash_point, update_rocket)


# Callback –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ó–∞–±—Ä–∞—Ç—å"
@router.callback_query(lambda c: c.data.startswith('rocket_cashout_'))
async def handle_rocket_cashout(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ó–∞–±—Ä–∞—Ç—å' –≤ –∏–≥—Ä–µ —Ä–∞–∫–µ—Ç–∫–∞"""
    try:
        await callback.answer()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–∞ –∞–∫—Ç–∏–≤–Ω–∞
        current_state = await state.get_state()
        
        if current_state != RocketStates.playing:
            await callback.answer("‚ùå –ò–≥—Ä–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞", show_alert=True)
            return
        
        bet_id = data.get('bet_id')
        stake_cents = data.get('stake_cents')
        crash_point = data.get('crash_point')
        user_id = data.get('user_id')
        user_mention = data.get('user_mention', '')
        
        if not all([bet_id, stake_cents, crash_point, user_id]):
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–≥—Ä—ã", show_alert=True)
            await state.clear()
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±—Ä–∞–ª –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫
        if data.get('cashed_out', False):
            await callback.answer("‚ùå –í—ã —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ –≤—ã–∏–≥—Ä—ã—à", show_alert=True)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            # –ü–∞—Ä—Å–∏–º —Ç–µ–∫—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
            message_text = callback.message.text
            
            if "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:" in message_text:
                coef_line = [line for line in message_text.split('\n') if '–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:' in line][0]
                
                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ –∏–∑ —Å—Ç—Ä–æ–∫–∏ —Ç–∏–ø–∞ "üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: 2.5x üöÄ"
                import re
                match = re.search(r'(\d+\.\d+)x', coef_line)
                if match:
                    current_multiplier = float(match.group(1))
                else:
                    current_multiplier = 1.0
            else:
                current_multiplier = 1.0
        except Exception:
            current_multiplier = 1.0
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–µ–≤—ã—Å–∏–ª –ª–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç —Ç–æ—á–∫—É –∫—Ä–∞—à–∞
        if current_multiplier >= crash_point:
            await callback.answer("‚ùå –°–ª–∏—à–∫–æ–º –ø–æ–∑–¥–Ω–æ! –†–∞–∫–µ—Ç–∫–∞ –≤–∑–æ—Ä–≤–∞–ª–∞—Å—å", show_alert=True)
            return
        
        # –ê–¢–û–ú–ê–†–ù–û –ø–æ–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –∑–∞–±—Ä–∞–ª –≤—ã–∏–≥—Ä—ã—à
        await state.update_data(cashed_out=True)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - –µ—Å–ª–∏ —É–∂–µ –∑–∞–±—Ä–∞–ª–∏, –≤—ã—Ö–æ–¥–∏–º
        updated_data = await state.get_data()
        if updated_data.get('cashed_out', False) != True:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏", show_alert=True)
            return
        
        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—ã–ø–ª–∞—Ç—É
        payout = RocketGame.calculate_payout(stake_cents, current_multiplier)
        
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å—Ç–∞–≤–∫—É (—Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –Ω–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ)
        try:
            await bet_service.complete_bet(bet_id, f"cashed_out_at_{current_multiplier}", payout)
        except Exception as e:
            # –ï—Å–ª–∏ —Å—Ç–∞–≤–∫–∞ —É–∂–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
            if "already completed" in str(e).lower() or "duplicate" in str(e).lower():
                await callback.answer("‚ùå –°—Ç–∞–≤–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞", show_alert=True)
                await state.clear()
                return
            else:
                raise e
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from src.database import async_session_maker
        async with async_session_maker() as session:
            result = await session.execute(select(User).where(User.id == user_id))
            user = result.scalar_one_or_none()
            
            if user:
                new_balance = await wallet_service.get_balance(user.id)
                
                text = f"{user_mention}‚úÖ <b>–í—ã–∏–≥—Ä—ã—à –∑–∞–±—Ä–∞–Ω!</b>\n\n"
                text += f"üìä –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: <b>{RocketGame.format_multiplier(current_multiplier)}</b>\n\n"
                text += f"üí∞ –í—ã–∏–≥—Ä—ã—à: <b>${format_money(payout)}</b>\n"
                text += f"üíµ –ë–∞–ª–∞–Ω—Å: <b>${format_money(new_balance)}</b>"
                
                try:
                    await callback.message.edit_text(text)
                except Exception:
                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    try:
                        await callback.message.answer(text)
                    except Exception:
                        pass
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        await state.clear()
        
    except Exception as e:
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


# --- –ö–û–ú–ê–ù–î–ê –ü–ï–†–ï–í–û–î–ê –î–ï–ù–ï–ì ---

@router.message(lambda message: message.text and message.text.lower().startswith('–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ '))
async def transfer_money_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ [–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ] [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]' –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–µ–Ω–µ–≥"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if await check_if_banned(message):
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ [—Å—É–º–º–∞] [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</b>\n\n"
                              "–ü—Ä–∏–º–µ—Ä: <code>–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ 1000 123456789</code>")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        try:
            amount_str = parts[1]
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 1000, 1k, 1.5k, 1000000, 1m
            amount_str = amount_str.lower().replace(',', '').replace(' ', '')
            
            if amount_str.endswith('k'):
                amount_cents = int(float(amount_str[:-1]) * 100000)  # k = 1000
            elif amount_str.endswith('m'):
                amount_cents = int(float(amount_str[:-1]) * 100000000)  # m = 1000000
            else:
                amount_cents = int(float(amount_str) * 100)  # –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
            
            if amount_cents <= 0:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return
                
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n\n"
                              "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                              "‚Ä¢ <code>1000</code> - 1000 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1k</code> - 1000 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1.5k</code> - 1500 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1m</code> - 1,000,000 –¥–æ–ª–ª–∞—Ä–æ–≤")
            return
        
        try:
            recipient_id = int(parts[2])
            if recipient_id <= 0:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ
        if recipient_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        from src.database import async_session_maker
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender_query = select(User).where(User.telegram_id == message.from_user.id)
            sender_result = await session.execute(sender_query)
            sender = sender_result.scalar_one_or_none()
            
            if not sender:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
            recipient_query = select(User).where(User.telegram_id == recipient_id)
            recipient_result = await session.execute(recipient_query)
            recipient = recipient_result.scalar_one_or_none()
            
            if not recipient:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                recipient = User(
                    telegram_id=recipient_id,
                    username=f"user_{recipient_id}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
                    first_name="Unknown",
                    last_name=None,
                    language_code="ru",
                    is_bot=False,
                    is_premium=False,
                    vip_status=False,
                    vip_multiplier=1.0,
                    vip_cashback_percentage=0.0
                )
                session.add(recipient)
                await session.commit()
                await session.refresh(recipient)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_balance = await wallet_service.get_balance(sender.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if sender_balance < amount_cents:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                              f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(sender_balance)}</b>\n"
                              f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è: <b>${format_money(amount_cents)}</b>")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await wallet_service.debit(sender.id, amount_cents, f"transfer_to_{recipient_id}")
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await wallet_service.credit(recipient.id, amount_cents, f"transfer_from_{message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        new_sender_balance = await wallet_service.get_balance(sender.id)
        new_recipient_balance = await wallet_service.get_balance(recipient.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ
        sender_name = message.from_user.username or message.from_user.first_name
        text = f"‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        text += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{sender_name}\n"
        text += f"üí∞ –°—É–º–º–∞: <b>${format_money(amount_cents)}</b>\n"
        text += f"üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å ID: <code>{recipient_id}</code>\n\n"
        text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(new_sender_balance)}</b>"
        
        await message.answer(text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            recipient_text = f"üí∞ <b>–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥!</b>\n\n"
            recipient_text += f"üë§ –û—Ç: @{sender_name}\n"
            recipient_text += f"üí∞ –°—É–º–º–∞: <b>${format_money(amount_cents)}</b>\n"
            recipient_text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(new_recipient_balance)}</b>"
            
            await message.bot.send_message(recipient_id, recipient_text)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Transfer error: {e}")


@router.message(lambda message: message.text and message.text.startswith('/transfer '))
async def cmd_transfer_with_params(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /transfer —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ (–∞–Ω–≥–ª–∏–π—Å–∫–∞—è –≤–µ—Ä—Å–∏—è)"""
    # –ó–∞–º–µ–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ —Ä—É—Å—Å–∫—É—é –≤–µ—Ä—Å–∏—é –∏ –≤—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    message.text = message.text.replace('/transfer ', '–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ ', 1)
    await transfer_money_command(message)


# --- –ö–û–ú–ê–ù–î–ê –ü–ï–†–ï–í–û–î–ê –ß–ï–†–ï–ó –†–ï–ü–õ–ê–ô ---

@router.message(lambda message: message.reply_to_message and message.text and message.text.lower().startswith('–ø '))
async def transfer_money_reply_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ø [—Å—É–º–º–∞]' –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if await check_if_banned(message):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–µ –Ω–∞ –±–æ—Ç–∞
        if message.reply_to_message.from_user.is_bot:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ –±–æ—Ç—É!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ
        if message.reply_to_message.from_user.id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>–ø [—Å—É–º–º–∞]</b>\n\n"
                              "–ü—Ä–∏–º–µ—Ä: <code>–ø 1000</code>")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É
        try:
            amount_str = parts[1]
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 1000, 1k, 1.5k, 1000000, 1m
            amount_str = amount_str.lower().replace(',', '').replace(' ', '')
            
            if amount_str.endswith('k'):
                amount_cents = int(float(amount_str[:-1]) * 100000)  # k = 1000
            elif amount_str.endswith('m'):
                amount_cents = int(float(amount_str[:-1]) * 100000000)  # m = 1000000
            else:
                amount_cents = int(float(amount_str) * 100)  # –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
            
            if amount_cents <= 0:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return
                
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n\n"
                              "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                              "‚Ä¢ <code>1000</code> - 1000 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1k</code> - 1000 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1.5k</code> - 1500 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1m</code> - 1,000,000 –¥–æ–ª–ª–∞—Ä–æ–≤")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è –∏–∑ —Ä–µ–ø–ª–∞—è
        recipient_id = message.reply_to_message.from_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        from src.database import async_session_maker
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender_query = select(User).where(User.telegram_id == message.from_user.id)
            sender_result = await session.execute(sender_query)
            sender = sender_result.scalar_one_or_none()
            
            if not sender:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
            recipient_query = select(User).where(User.telegram_id == recipient_id)
            recipient_result = await session.execute(recipient_query)
            recipient = recipient_result.scalar_one_or_none()
            
            if not recipient:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                recipient = User(
                    telegram_id=recipient_id,
                    username=f"user_{recipient_id}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
                    first_name="Unknown",
                    last_name=None,
                    language_code="ru",
                    is_bot=False,
                    is_premium=False,
                    vip_status=False,
                    vip_multiplier=1.0,
                    vip_cashback_percentage=0.0
                )
                session.add(recipient)
                await session.commit()
                await session.refresh(recipient)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_balance = await wallet_service.get_balance(sender.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if sender_balance < amount_cents:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                              f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(sender_balance)}</b>\n"
                              f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è: <b>${format_money(amount_cents)}</b>")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await wallet_service.debit(sender.id, amount_cents, f"transfer_to_{recipient_id}")
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await wallet_service.credit(recipient.id, amount_cents, f"transfer_from_{message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        new_sender_balance = await wallet_service.get_balance(sender.id)
        new_recipient_balance = await wallet_service.get_balance(recipient.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ
        sender_name = message.from_user.username or message.from_user.first_name
        recipient_name = message.reply_to_message.from_user.username or message.reply_to_message.from_user.first_name
        text = f"‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        text += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{sender_name}\n"
        text += f"üí∞ –°—É–º–º–∞: <b>${format_money(amount_cents)}</b>\n"
        text += f"üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å: @{recipient_name}\n\n"
        text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(new_sender_balance)}</b>"
        
        await message.answer(text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            recipient_text = f"üí∞ <b>–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥!</b>\n\n"
            recipient_text += f"üë§ –û—Ç: @{sender_name}\n"
            recipient_text += f"üí∞ –°—É–º–º–∞: <b>${format_money(amount_cents)}</b>\n"
            recipient_text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(new_recipient_balance)}</b>"
            
            await message.bot.send_message(recipient_id, recipient_text)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Transfer reply error: {e}")


# --- –ö–û–†–û–¢–ö–ò–ô –ê–õ–ò–ê–° –ö–û–ú–ê–ù–î–´ –ü–ï–†–ï–í–û–î–ê ---

@router.message(lambda message: message.text and message.text.lower().startswith('–ø '))
async def transfer_money_short_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ—Ä–æ—Ç–∫—É—é –∫–æ–º–∞–Ω–¥—É '–ø [—Å—É–º–º–∞] [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]'"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if await check_if_banned(message):
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>–ø [—Å—É–º–º–∞] [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</b>\n\n"
                              "–ü—Ä–∏–º–µ—Ä: <code>–ø 1000 123456789</code>")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É–º–º—É –∏ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        try:
            amount_str = parts[1]
            # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: 1000, 1k, 1.5k, 1000000, 1m
            amount_str = amount_str.lower().replace(',', '').replace(' ', '')
            
            if amount_str.endswith('k'):
                amount_cents = int(float(amount_str[:-1]) * 100000)  # k = 1000
            elif amount_str.endswith('m'):
                amount_cents = int(float(amount_str[:-1]) * 100000000)  # m = 1000000
            else:
                amount_cents = int(float(amount_str) * 100)  # –æ–±—ã—á–Ω–æ–µ —á–∏—Å–ª–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
            
            if amount_cents <= 0:
                await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return
                
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã!\n\n"
                              "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                              "‚Ä¢ <code>1000</code> - 1000 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1k</code> - 1000 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1.5k</code> - 1500 –¥–æ–ª–ª–∞—Ä–æ–≤\n"
                              "‚Ä¢ <code>1m</code> - 1,000,000 –¥–æ–ª–ª–∞—Ä–æ–≤")
            return
        
        try:
            recipient_id = int(parts[2])
            if recipient_id <= 0:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ
        if recipient_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –¥–µ–Ω—å–≥–∏ —Å–∞–º–æ–º—É —Å–µ–±–µ!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ user_id –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è
        from src.database import async_session_maker
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            sender_query = select(User).where(User.telegram_id == message.from_user.id)
            sender_result = await session.execute(sender_query)
            sender = sender_result.scalar_one_or_none()
            
            if not sender:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—è, —Å–æ–∑–¥–∞–µ–º –µ—Å–ª–∏ –Ω–µ—Ç
            recipient_query = select(User).where(User.telegram_id == recipient_id)
            recipient_result = await session.execute(recipient_query)
            recipient = recipient_result.scalar_one_or_none()
            
            if not recipient:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                recipient = User(
                    telegram_id=recipient_id,
                    username=f"user_{recipient_id}",  # –í—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è
                    first_name="Unknown",
                    last_name=None,
                    language_code="ru",
                    is_bot=False,
                    is_premium=False,
                    vip_status=False,
                    vip_multiplier=1.0,
                    vip_cashback_percentage=0.0
                )
                session.add(recipient)
                await session.commit()
                await session.refresh(recipient)
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_balance = await wallet_service.get_balance(sender.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
        if sender_balance < amount_cents:
            await message.answer(f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!\n\n"
                              f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(sender_balance)}</b>\n"
                              f"üí∏ –¢—Ä–µ–±—É–µ—Ç—Å—è: <b>${format_money(amount_cents)}</b>")
            return
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–µ—Ä–µ–≤–æ–¥
        # –°–ø–∏—Å—ã–≤–∞–µ–º —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        await wallet_service.debit(sender.id, amount_cents, f"transfer_to_{recipient_id}")
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª—é
        await wallet_service.credit(recipient.id, amount_cents, f"transfer_from_{message.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
        new_sender_balance = await wallet_service.get_balance(sender.id)
        new_recipient_balance = await wallet_service.get_balance(recipient.id)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –ø–µ—Ä–µ–≤–æ–¥–µ
        sender_name = message.from_user.username or message.from_user.first_name
        text = f"‚úÖ <b>–ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!</b>\n\n"
        text += f"üë§ –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: @{sender_name}\n"
        text += f"üí∞ –°—É–º–º–∞: <b>${format_money(amount_cents)}</b>\n"
        text += f"üéØ –ü–æ–ª—É—á–∞—Ç–µ–ª—å ID: <code>{recipient_id}</code>\n\n"
        text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(new_sender_balance)}</b>"
        
        await message.answer(text)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é (–µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ)
        try:
            recipient_text = f"üí∞ <b>–ü–æ–ª—É—á–µ–Ω –ø–µ—Ä–µ–≤–æ–¥!</b>\n\n"
            recipient_text += f"üë§ –û—Ç: @{sender_name}\n"
            recipient_text += f"üí∞ –°—É–º–º–∞: <b>${format_money(amount_cents)}</b>\n"
            recipient_text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(new_recipient_balance)}</b>"
            
            await message.bot.send_message(recipient_id, recipient_text)
        except Exception:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª—é, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
            pass
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Transfer short error: {e}")


# --- –ê–õ–ò–ê–°–´ –î–õ–Ø –ü–û–ö–ê–ó–ê –ë–ê–õ–ê–ù–°–ê ---

@router.message(lambda message: message.text and message.text.lower() in ['–±', '–±–∞–ª–∞–Ω—Å', '–º', '–º–µ—à–æ–∫'])
async def show_balance_aliases(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –±–∞–ª–∞–Ω—Å –ø–æ –∞–ª–∏–∞—Å–∞–º: –±, –±–∞–ª–∞–Ω—Å, –º, –º–µ—à–æ–∫"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if await check_if_banned(message):
            return
        
        from src.database import async_session_maker
        telegram_id = message.from_user.id

        async with async_session_maker() as session:
            result = await session.execute(
                select(User).where(User.telegram_id == telegram_id)
            )
            user = result.scalar_one_or_none()

            if not user:
                await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
                return

            balance = await wallet_service.get_balance(user.id)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø–∞—Ö
            if message.chat.type in ['group', 'supergroup']:
                username = message.from_user.username or message.from_user.first_name
                text = f"@{username}, üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>${balance / 100:.2f}</b>"
            else:
                text = f"üí∞ –¢–≤–æ–π –±–∞–ª–∞–Ω—Å: <b>${balance / 100:.2f}</b>"

            await message.answer(text)
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Balance alias error: {e}")


# --- –§–£–ù–ö–¶–ò–ò –ü–û–î–ö–†–£–¢–ö–ò ---

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    try:
        from src.config import settings
        admin_ids = settings.ADMIN_ID
        if isinstance(admin_ids, str):
            admin_ids = [int(x.strip()) for x in admin_ids.split(',')]
        elif isinstance(admin_ids, int):
            admin_ids = [admin_ids]
        return user_id in admin_ids
    except Exception:
        return False

async def get_user_rig_info(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫—Ä—É—Ç–∫–∏ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        from datetime import datetime
        
        async with async_session_maker() as session:
            
            user_query = select(User).where(User.telegram_id == user_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            print(f"DEBUG RIG INFO: User {user_id}, user found: {user is not None}, rig_until: {getattr(user, 'rig_until', None) if user else None}")
            
            if not user or not user.rig_until:
                return False, None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–∫—Ä—É—Ç–∫–∞
            if datetime.utcnow() > user.rig_until:
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é –ø–æ–¥–∫—Ä—É—Ç–∫—É
                user.rig_until = None
                await session.commit()
                print(f"DEBUG RIG INFO: Rig expired for user {user_id}")
                return False, None
            
            print(f"DEBUG RIG INFO: Rig active for user {user_id} until {user.rig_until}")
            return True, user.rig_until
    except Exception as e:
        print(f"Rig info error: {e}")
        return False, None

async def get_user_unrig_info(user_id: int):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –æ—Ç–∫—Ä—É—Ç–∫–∏ –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        from datetime import datetime
        
        async with async_session_maker() as session:
            
            user_query = select(User).where(User.telegram_id == user_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            print(f"DEBUG UNRIG INFO: User {user_id}, user found: {user is not None}, unrig_until: {getattr(user, 'unrig_until', None) if user else None}")
            
            if not user or not user.unrig_until:
                return False, None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –æ—Ç–∫—Ä—É—Ç–∫–∞
            if datetime.utcnow() > user.unrig_until:
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é –æ—Ç–∫—Ä—É—Ç–∫—É
                user.unrig_until = None
                await session.commit()
                print(f"DEBUG UNRIG INFO: Unrig expired for user {user_id}")
                return False, None
            
            print(f"DEBUG UNRIG INFO: Unrig active for user {user_id} until {user.unrig_until}")
            return True, user.unrig_until
    except Exception as e:
        print(f"Unrig info error: {e}")
        return False, None

async def is_user_rigged(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –ø–æ–¥–∫—Ä—É—Ç–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        from datetime import datetime
        
        async with async_session_maker() as session:
            
            user_query = select(User).where(User.telegram_id == user_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            print(f"DEBUG RIG: User {user_id}, user found: {user is not None}, rig_until: {getattr(user, 'rig_until', None) if user else None}")
            
            if not user or not user.rig_until:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–∫—Ä—É—Ç–∫–∞
            if datetime.utcnow() > user.rig_until:
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é –ø–æ–¥–∫—Ä—É—Ç–∫—É
                user.rig_until = None
                await session.commit()
                print(f"DEBUG RIG: Rig expired for user {user_id}")
                return False
            
            print(f"DEBUG RIG: Rig active for user {user_id} until {user.rig_until}")
            return True
    except Exception as e:
        print(f"Rig check error: {e}")
        return False

async def is_user_unrigged(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∞–∫—Ç–∏–≤–Ω–∞ –ª–∏ –æ—Ç–∫—Ä—É—Ç–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        from datetime import datetime
        
        async with async_session_maker() as session:
            
            user_query = select(User).where(User.telegram_id == user_id)
            user_result = await session.execute(user_query)
            user = user_result.scalar_one_or_none()
            
            print(f"DEBUG UNRIG: User {user_id}, user found: {user is not None}, unrig_until: {getattr(user, 'unrig_until', None) if user else None}")
            
            if not user or not user.unrig_until:
                return False
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –æ—Ç–∫—Ä—É—Ç–∫–∞
            if datetime.utcnow() > user.unrig_until:
                # –û—á–∏—â–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é –æ—Ç–∫—Ä—É—Ç–∫—É
                user.unrig_until = None
                await session.commit()
                print(f"DEBUG UNRIG: Unrig expired for user {user_id}")
                return False
            
            print(f"DEBUG UNRIG: Unrig active for user {user_id} until {user.unrig_until}")
            return True
    except Exception as e:
        print(f"Unrig check error: {e}")
        return False

# --- –ö–û–ú–ê–ù–î–ê –ü–û–î–ö–†–£–¢–ö–ò ---

@router.message(lambda message: message.text and message.text.lower().startswith('–ø–æ–¥–∫—Ä—É—Ç–∫–∞ '))
async def rig_user_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ø–æ–¥–∫—Ä—É—Ç–∫–∞ [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–≤—Ä–µ–º—è]' –¥–ª—è –ø–æ–¥–∫—Ä—É—Ç–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: –ø–æ–¥–∫—Ä—É—Ç–∫–∞ 123456789 30s
        parts = message.text.lower().split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>–ø–æ–¥–∫—Ä—É—Ç–∫–∞ [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–≤—Ä–µ–º—è]</code>\n\n"
                              "‚è∞ –§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
                              "‚Ä¢ <code>30s</code> - 30 —Å–µ–∫—É–Ω–¥\n"
                              "‚Ä¢ <code>2h</code> - 2 —á–∞—Å–∞\n"
                              "‚Ä¢ <code>1y</code> - 1 –≥–æ–¥")
            return
        
        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            target_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_str = parts[2]
        if not time_str[-1] in ['s', 'h', 'y']:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                              "‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                              "‚Ä¢ <code>s</code> - —Å–µ–∫—É–Ω–¥—ã\n"
                              "‚Ä¢ <code>h</code> - —á–∞—Å—ã\n"
                              "‚Ä¢ <code>y</code> - –≥–æ–¥—ã")
            return
        
        try:
            time_value = int(time_str[:-1])
            if time_value <= 0:
                raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏!")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã
        time_unit = time_str[-1]
        if time_unit == 's':
            duration_seconds = time_value
        elif time_unit == 'h':
            duration_seconds = time_value * 3600
        elif time_unit == 'y':
            duration_seconds = time_value * 365 * 24 * 3600
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (1 –≥–æ–¥)
        if duration_seconds > 365 * 24 * 3600:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –ø–æ–¥–∫—Ä—É—Ç–∫–∏: 1 –≥–æ–¥!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        from datetime import datetime, timedelta
        
        async with async_session_maker() as session:
            
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–±–∏—Ç–µ–ª—è
            robber_query = select(User).where(User.telegram_id == message.from_user.id)
            robber_result = await session.execute(robber_query)
            robber = robber_result.scalar_one_or_none()
            
            if not robber:
                await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
            target_query = select(User).where(User.telegram_id == target_id)
            target_result = await session.execute(target_query)
            target = target_result.scalar_one_or_none()
            
            if not target:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É
        rig_until = datetime.utcnow() + timedelta(seconds=duration_seconds)
        
        print(f"DEBUG RIG SET: Setting rig_until for user {target_id} to {rig_until}")
        
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            target_query = select(User).where(User.telegram_id == target_id)
            target_result = await session.execute(target_query)
            target = target_result.scalar_one_or_none()
            
            if not target:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            target.rig_until = rig_until
            await session.commit()
            print(f"DEBUG RIG SET: Successfully set rig_until for user {target_id}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if time_unit == 's':
            time_display = f"{time_value} —Å–µ–∫"
        elif time_unit == 'h':
            time_display = f"{time_value} —á–∞—Å"
        else:
            time_display = f"{time_value} –≥–æ–¥"
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"üéØ <b>–ü–û–î–ö–†–£–¢–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!</b> üéØ\n\n"
        success_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{target_id}</code>\n"
        success_text += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{time_display}</b>\n"
        success_text += f"üé∞ –°—Ç–∞—Ç—É—Å: <b>100% –≤—ã–∏–≥—Ä—ã—à–∏</b>\n\n"
        success_text += f"üïê –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{rig_until.strftime('%d.%m.%Y %H:%M:%S')}</b>"
        
        await message.answer(success_text)
        
    except Exception as e:
        print(f"Rig command error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–∫—Ä—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –ö–û–ú–ê–ù–î–ê –û–¢–ö–†–£–¢–ö–ò ---

@router.message(lambda message: message.text and message.text.lower().startswith('–æ—Ç–∫—Ä—É—Ç–∫–∞ '))
async def unrig_user_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–æ—Ç–∫—Ä—É—Ç–∫–∞ [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–≤—Ä–µ–º—è]' –¥–ª—è –æ—Ç–∫—Ä—É—Ç–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: –æ—Ç–∫—Ä—É—Ç–∫–∞ 123456789 30s
        parts = message.text.lower().split()
        if len(parts) != 3:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>–æ—Ç–∫—Ä—É—Ç–∫–∞ [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] [–≤—Ä–µ–º—è]</code>\n\n"
                              "‚è∞ –§–æ—Ä–º–∞—Ç—ã –≤—Ä–µ–º–µ–Ω–∏:\n"
                              "‚Ä¢ <code>30s</code> - 30 —Å–µ–∫—É–Ω–¥\n"
                              "‚Ä¢ <code>2h</code> - 2 —á–∞—Å–∞\n"
                              "‚Ä¢ <code>1y</code> - 1 –≥–æ–¥")
            return
        
        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            target_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü–∞—Ä—Å–∏–º –≤—Ä–µ–º—è
        time_str = parts[2]
        if not time_str[-1] in ['s', 'h', 'y']:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                              "‚è∞ –î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:\n"
                              "‚Ä¢ <code>s</code> - —Å–µ–∫—É–Ω–¥—ã\n"
                              "‚Ä¢ <code>h</code> - —á–∞—Å—ã\n"
                              "‚Ä¢ <code>y</code> - –≥–æ–¥—ã")
            return
        
        try:
            time_value = int(time_str[:-1])
            if time_value <= 0:
                raise ValueError("–í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–æ–ª—å—à–µ 0")
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏!")
            return
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥—ã
        time_unit = time_str[-1]
        if time_unit == 's':
            duration_seconds = time_value
        elif time_unit == 'h':
            duration_seconds = time_value * 3600
        elif time_unit == 'y':
            duration_seconds = time_value * 365 * 24 * 3600
        else:
            await message.answer("‚ùå –ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è (1 –≥–æ–¥)
        if duration_seconds > 365 * 24 * 3600:
            await message.answer("‚ùå –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ—Ç–∫—Ä—É—Ç–∫–∏: 1 –≥–æ–¥!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        from datetime import datetime, timedelta
        
        async with async_session_maker() as session:
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_query = select(User).where(User.telegram_id == message.from_user.id)
            admin_result = await session.execute(admin_query)
            admin = admin_result.scalar_one_or_none()
            
            if not admin:
                await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
            target_query = select(User).where(User.telegram_id == target_id)
            target_result = await session.execute(target_query)
            target = target_result.scalar_one_or_none()
            
            if not target:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ç–∫—Ä—É—Ç–∫—É
        unrig_until = datetime.utcnow() + timedelta(seconds=duration_seconds)
        
        print(f"DEBUG UNRIG SET: Setting unrig_until for user {target_id} to {unrig_until}")
        
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–Ω–æ–≤–æ –≤ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏
            target_query = select(User).where(User.telegram_id == target_id)
            target_result = await session.execute(target_query)
            target = target_result.scalar_one_or_none()
            
            if not target:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            target.unrig_until = unrig_until
            await session.commit()
            print(f"DEBUG UNRIG SET: Successfully set unrig_until for user {target_id}")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if time_unit == 's':
            time_display = f"{time_value} —Å–µ–∫"
        elif time_unit == 'h':
            time_display = f"{time_value} —á–∞—Å"
        else:
            time_display = f"{time_value} –≥–æ–¥"
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"üíÄ <b>–û–¢–ö–†–£–¢–ö–ê –ê–ö–¢–ò–í–ò–†–û–í–ê–ù–ê!</b> üíÄ\n\n"
        success_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{target_id}</code>\n"
        success_text += f"‚è∞ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: <b>{time_display}</b>\n"
        success_text += f"üé∞ –°—Ç–∞—Ç—É—Å: <b>100% –ø—Ä–æ–∏–≥—Ä—ã—à–∏</b>\n\n"
        success_text += f"üïê –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: <b>{unrig_until.strftime('%d.%m.%Y %H:%M:%S')}</b>"
        
        await message.answer(success_text)
        
    except Exception as e:
        print(f"Unrig command error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –æ—Ç–∫—Ä—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –ö–û–ú–ê–ù–î–ê –ü–†–û–í–ï–†–ö–ò –õ–ò–ß–ù–û–°–¢–ò ---

@router.message(lambda message: message.text and message.text.lower().startswith('–ª–∏—á–Ω–æ—Å—Ç—å '))
async def check_personality_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–ª–∏—á–Ω–æ—Å—Ç—å [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: –ª–∏—á–Ω–æ—Å—Ç—å 123456789
        parts = message.text.lower().split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>–ª–∏—á–Ω–æ—Å—Ç—å [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code>")
            return
        
        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            target_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        
        async with async_session_maker() as session:
            target_query = select(User).where(User.telegram_id == target_id)
            target_result = await session.execute(target_query)
            target = target_result.scalar_one_or_none()
            
            if not target:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª–∏—á–Ω–æ—Å—Ç–∏
        personality = getattr(target, 'personality', 'playful')
        success_text = f"üë§ <b>–õ–ò–ß–ù–û–°–¢–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø</b> üë§\n\n"
        success_text += f"üÜî ID: <code>{target_id}</code>\n"
        success_text += f"üë§ –ò–º—è: <b>{target.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n"
        success_text += f"üé≠ –õ–∏—á–Ω–æ—Å—Ç—å: <b>{personality}</b>\n\n"
        success_text += f"üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—á–Ω–æ—Å—Ç–∏: <code>playful, neutral, formal, freak</code>"
        
        await message.answer(success_text)
        
    except Exception as e:
        print(f"Check personality command error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏—á–Ω–æ—Å—Ç–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –ö–û–ú–ê–ù–î–ê –ü–†–û–í–ï–†–ö–ò –ü–û–î–ö–†–£–¢–ö–ò ---

@router.message(lambda message: message.text and message.text.lower().startswith('—Å—Ç–∞—Ç—É—Å '))
async def check_rig_status_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '—Å—Ç–∞—Ç—É—Å [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]' –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫—Ä—É—Ç–∫–∏/–æ—Ç–∫—Ä—É—Ç–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: —Å—Ç–∞—Ç—É—Å 123456789
        parts = message.text.lower().split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>—Å—Ç–∞—Ç—É—Å [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code>")
            return
        
        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            target_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        
        async with async_session_maker() as session:
            target_query = select(User).where(User.telegram_id == target_id)
            target_result = await session.execute(target_query)
            target = target_result.scalar_one_or_none()
            
            if not target:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫—Ä—É—Ç–∫–∏/–æ—Ç–∫—Ä—É—Ç–∫–∏
        print(f"DEBUG STATUS START: Checking user {target_id}")
        is_rigged, rig_until = await get_user_rig_info(target_id)
        is_unrigged, unrig_until = await get_user_unrig_info(target_id)
        
        print(f"DEBUG STATUS: User {target_id}, is_rigged: {is_rigged}, rig_until: {rig_until}, is_unrigged: {is_unrigged}, unrig_until: {unrig_until}")
        
        success_text = f"üéØ <b>–°–¢–ê–¢–£–° –ú–û–î–ò–§–ò–ö–ê–¶–ò–ô</b> üéØ\n\n"
        success_text += f"üÜî ID: <code>{target_id}</code>\n"
        success_text += f"üë§ –ò–º—è: <b>{target.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}</b>\n\n"
        
        if is_rigged:
            success_text += f"üéØ <b>–ü–û–î–ö–†–£–¢–ö–ê –ê–ö–¢–ò–í–ù–ê</b>\n"
            success_text += f"‚è∞ –î–æ: <b>{rig_until.strftime('%d.%m.%Y %H:%M:%S')}</b>\n\n"
        elif is_unrigged:
            success_text += f"üíÄ <b>–û–¢–ö–†–£–¢–ö–ê –ê–ö–¢–ò–í–ù–ê</b>\n"
            success_text += f"‚è∞ –î–æ: <b>{unrig_until.strftime('%d.%m.%Y %H:%M:%S')}</b>\n\n"
        else:
            success_text += f"üé∞ <b>–û–ë–´–ß–ù–ê–Ø –ò–ì–†–ê</b>\n"
            success_text += f"üìù –ú–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω—ã\n\n"
        
        success_text += f"üîß –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        success_text += f"‚Ä¢ <code>–ø–æ–¥–∫—Ä—É—Ç–∫–∞ {target_id} 30s</code>\n"
        success_text += f"‚Ä¢ <code>–æ—Ç–∫—Ä—É—Ç–∫–∞ {target_id} 30s</code>\n"
        success_text += f"‚Ä¢ <code>–≤—ã–∫–ª—é—á–∏—Ç—å {target_id}</code>"
        
        await message.answer(success_text)
        
    except Exception as e:
        print(f"Check rig status command error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –ö–û–ú–ê–ù–î–ê –í–´–ö–õ–Æ–ß–ï–ù–ò–Ø –ü–û–î–ö–†–£–¢–ö–ò/–û–¢–ö–†–£–¢–ö–ò ---

@router.message(lambda message: message.text and message.text.lower().startswith('–≤—ã–∫–ª—é—á–∏—Ç—å '))
async def disable_rig_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–≤—ã–∫–ª—é—á–∏—Ç—å [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]' –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è –ø–æ–¥–∫—Ä—É—Ç–∫–∏/–æ—Ç–∫—Ä—É—Ç–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É: –≤—ã–∫–ª—é—á–∏—Ç—å 123456789
        parts = message.text.lower().split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "üìù –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: <code>–≤—ã–∫–ª—é—á–∏—Ç—å [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</code>\n\n"
                              "üîß –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–∫–ª—é—á–∞–µ—Ç –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
            return
        
        # –ü–∞—Ä—Å–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        try:
            target_id = int(parts[1])
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        from src.database import async_session_maker
        from src.models import User
        from sqlalchemy import select
        
        async with async_session_maker() as session:
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_query = select(User).where(User.telegram_id == message.from_user.id)
            admin_result = await session.execute(admin_query)
            admin = admin_result.scalar_one_or_none()
            
            if not admin:
                await message.answer("‚ùå –í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
            target_query = select(User).where(User.telegram_id == target_id)
            target_result = await session.execute(target_query)
            target = target_result.scalar_one_or_none()
            
            if not target:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–¥–∫—Ä—É—Ç–∫—É –∏ –æ—Ç–∫—Ä—É—Ç–∫—É
        async with async_session_maker() as session:
            target.rig_until = None
            target.unrig_until = None
            await session.commit()
        
        # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
        success_text = f"üîß <b>–ü–û–î–ö–†–£–¢–ö–ê –ò –û–¢–ö–†–£–¢–ö–ê –û–¢–ö–õ–Æ–ß–ï–ù–´!</b> üîß\n\n"
        success_text += f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <code>{target_id}</code>\n"
        success_text += f"üé∞ –°—Ç–∞—Ç—É—Å: <b>–û–±—ã—á–Ω–∞—è –∏–≥—Ä–∞</b>\n\n"
        success_text += f"‚úÖ –í—Å–µ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã"
        
        await message.answer(success_text)
        
    except Exception as e:
        print(f"Disable rig command error: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–æ–¥–∫—Ä—É—Ç–∫–∏/–æ—Ç–∫—Ä—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


# --- –ö–û–ú–ê–ù–î–ê –û–ì–†–ê–ë–õ–ï–ù–ò–Ø ---

@router.message(lambda message: message.text and message.text.lower().startswith('–æ–≥—Ä–∞–±–∏—Ç—å '))
async def rob_user_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–æ–≥—Ä–∞–±–∏—Ç—å [–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]'"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if await check_if_banned(message):
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        parts = message.text.split()
        if len(parts) != 2:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã!\n\n"
                              "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <b>–æ–≥—Ä–∞–±–∏—Ç—å [ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]</b>\n\n"
                              "–ü—Ä–∏–º–µ—Ä: <code>–æ–≥—Ä–∞–±–∏—Ç—å 123456789</code>")
            return
        
        try:
            target_id = int(parts[1])
            if target_id <= 0:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–≥—Ä–∞–±–∏—Ç—å —Å–∞–º —Å–µ–±—è
        if target_id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–±–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ü–µ–ª—å –Ω–µ –±–æ—Ç
        if target_id == message.bot.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–±–∏—Ç—å –±–æ—Ç–∞!")
            return
        
        await start_rob_process(message, target_id)
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Rob command error: {e}")


@router.message(lambda message: message.reply_to_message and message.text and message.text.lower() == '–æ–≥—Ä–∞–±–∏—Ç—å')
async def rob_user_reply_command(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É '–æ–≥—Ä–∞–±–∏—Ç—å' –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
        if await check_if_banned(message):
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ä–µ–ø–ª–∞–π –Ω–µ –Ω–∞ –±–æ—Ç–∞
        if message.reply_to_message.from_user.is_bot:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–±–∏—Ç—å –±–æ—Ç–∞!")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –æ–≥—Ä–∞–±–∏—Ç—å —Å–∞–º —Å–µ–±—è
        if message.reply_to_message.from_user.id == message.from_user.id:
            await message.answer("‚ùå –ù–µ–ª—å–∑—è –æ–≥—Ä–∞–±–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è!")
            return
        
        target_id = message.reply_to_message.from_user.id
        await start_rob_process(message, target_id)
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Rob reply error: {e}")


async def start_rob_process(message: Message, target_id: int):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è"""
    try:
        from src.database import async_session_maker
        from src.models import User
        from datetime import datetime, timedelta
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä–∞–±–∏—Ç–µ–ª—è
            robber_query = select(User).where(User.telegram_id == message.from_user.id)
            robber_result = await session.execute(robber_query)
            robber = robber_result.scalar_one_or_none()
            
            if not robber:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –≤–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º —Ü–µ–ª—å
            target_query = select(User).where(User.telegram_id == target_id)
            target_result = await session.execute(target_query)
            target = target_result.scalar_one_or_none()
            
            if not target:
                await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ!")
                return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –æ–≥—Ä–∞–±–ª–µ–Ω–∏–π (—Ä–∞–∑ –≤ —Å—É—Ç–∫–∏)
        last_rob_time = getattr(robber, 'last_rob_time', None)
        if last_rob_time:
            time_since_last_rob = datetime.utcnow() - last_rob_time
            if time_since_last_rob.total_seconds() < 86400:  # 24 —á–∞—Å–∞
                hours_left = int((86400 - time_since_last_rob.total_seconds()) / 3600)
                await message.answer(f"‚è∞ –û–≥—Ä–∞–±–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏!\n\n"
                                  f"‚è≥ –°–ª–µ–¥—É—é—â–µ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑: <b>{hours_left} —á–∞—Å–æ–≤</b>")
                return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å—ã
        robber_balance = await wallet_service.get_balance(robber.id)
        target_balance = await wallet_service.get_balance(target.id)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –≥—Ä–∞–±–∏—Ç–µ–ª—è (–Ω—É–∂–Ω–æ —Ö–æ—Ç—è –±—ã $10 –¥–ª—è —à—Ç—Ä–∞—Ñ–∞)
        if robber_balance < 1000:  # $10 –≤ —Ü–µ–Ω—Ç–∞—Ö
            await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è!\n\n"
                              f"üí∞ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: <b>$10.00</b>\n"
                              f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(robber_balance)}</b>")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É —Ü–µ–ª–∏ –µ—Å—Ç—å –¥–µ–Ω—å–≥–∏ –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
        if target_balance < 100:  # $1 –≤ —Ü–µ–Ω—Ç–∞—Ö
            await message.answer("‚ùå –£ —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –¥–µ–Ω–µ–≥ –¥–ª—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è!")
            return
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
        await message.answer(f"üî´ <b>–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}...</b>\n\n"
                          f"‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—é... 0%")
        
        # –ê–Ω–∏–º–∞—Ü–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_msg = await message.answer("‚è≥ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—é... 0%")
        
        for progress in range(0, 101, 5):
            await asyncio.sleep(0.1)  # –ë—ã—Å—Ç—Ä–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
            
            if progress < 30:
                status = "üîç –†–∞–∑–≤–µ–¥–∫–∞..."
            elif progress < 60:
                status = "üöó –ü–æ–¥—Ö–æ–¥ –∫ —Ü–µ–ª–∏..."
            elif progress < 90:
                status = "üîì –í–∑–ª–æ–º –∑–∞—â–∏—Ç—ã..."
            else:
                status = "üí∞ –ó–∞—Ö–≤–∞—Ç –¥–µ–Ω–µ–≥..."
            
            try:
                await progress_msg.edit_text(f"üî´ <b>–ù–∞—á–∞—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {target_id}...</b>\n\n"
                                          f"{status} {progress}%")
            except Exception:
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
                pass
        
        # –ö—Ä–∞—Å–∏–≤–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        await asyncio.sleep(0.5)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
        rob_success = random.random() < 0.25  # 25% —à–∞–Ω—Å —É—Å–ø–µ—Ö–∞
        
        try:
            if rob_success:
                # –£—Å–ø–µ—à–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ
                stolen_amount = int(target_balance * 0.3)  # 30% –æ—Ç –±–∞–ª–∞–Ω—Å–∞ —Ü–µ–ª–∏
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É —Ü–µ–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤
                if stolen_amount > target_balance:
                    stolen_amount = target_balance
                
                # –°–ø–∏—Å—ã–≤–∞–µ–º —Å —Ü–µ–ª–∏
                await wallet_service.debit(target.id, stolen_amount, f"robbed_by_{message.from_user.id}")
                
                # –ó–∞—á–∏—Å–ª—è–µ–º –≥—Ä–∞–±–∏—Ç–µ–ª—é
                await wallet_service.credit(robber.id, stolen_amount, f"robbed_from_{target_id}")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
                async with async_session_maker() as session:
                    robber.last_rob_time = datetime.utcnow()
                    await session.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –±–∞–ª–∞–Ω—Å—ã
                new_robber_balance = await wallet_service.get_balance(robber.id)
                
                # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
                success_text = f"üéâ <b>–û–ì–†–ê–ë–õ–ï–ù–ò–ï –£–°–ü–ï–®–ù–û!</b> üéâ\n\n"
                success_text += f"üí∞ –£–∫—Ä–∞–¥–µ–Ω–æ: <b>${format_money(stolen_amount)}</b>\n"
                success_text += f"üéØ –ñ–µ—Ä—Ç–≤–∞: <code>{target_id}</code>\n"
                success_text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(new_robber_balance)}</b>\n\n"
                success_text += f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"
                
                try:
                    await progress_msg.edit_text(success_text)
                except Exception:
                    await message.answer(success_text)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤–µ
                try:
                    victim_text = f"üö® <b>–í–∞—Å –æ–≥—Ä–∞–±–∏–ª–∏!</b> üö®\n\n"
                    victim_text += f"üí∞ –ü–æ—Ç–µ—Ä—è–Ω–æ: <b>${format_money(stolen_amount)}</b>\n"
                    victim_text += f"üî´ –ì—Ä–∞–±–∏—Ç–µ–ª—å: @{message.from_user.username or message.from_user.first_name}\n"
                    victim_text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(await wallet_service.get_balance(target.id))}</b>"
                    
                    await message.bot.send_message(target_id, victim_text)
                except Exception:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∂–µ—Ä—Ç–≤–µ
                    pass
                    
            else:
                # –ù–µ—É–¥–∞—á–Ω–æ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ
                penalty_amount = int(robber_balance * 0.1)  # 10% —à—Ç—Ä–∞—Ñ
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –≥—Ä–∞–±–∏—Ç–µ–ª—è –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —à—Ç—Ä–∞—Ñ–∞
                if penalty_amount > robber_balance:
                    penalty_amount = robber_balance
                
                # –°–ø–∏—Å—ã–≤–∞–µ–º —à—Ç—Ä–∞—Ñ —Å –≥—Ä–∞–±–∏—Ç–µ–ª—è
                await wallet_service.debit(robber.id, penalty_amount, f"rob_failed_penalty")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è
                async with async_session_maker() as session:
                    robber.last_rob_time = datetime.utcnow()
                    await session.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                new_robber_balance = await wallet_service.get_balance(robber.id)
                
                # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ—É–¥–∞—á–µ
                fail_text = f"üí• <b>–û–ì–†–ê–ë–õ–ï–ù–ò–ï –ü–†–û–í–ê–õ–ò–õ–û–°–¨!</b> üí•\n\n"
                fail_text += f"üöî –í–∞—Å –ø–æ–π–º–∞–ª–∏ –ø–æ–ª–∏—Ü–µ–π—Å–∫–∏–µ!\n"
                fail_text += f"üí∏ –®—Ç—Ä–∞—Ñ: <b>${format_money(penalty_amount)}</b>\n"
                fail_text += f"üíµ –í–∞—à –±–∞–ª–∞–Ω—Å: <b>${format_money(new_robber_balance)}</b>\n\n"
                fail_text += f"‚è∞ –°–ª–µ–¥—É—é—â–µ–µ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞"
                
                try:
                    await progress_msg.edit_text(fail_text)
                except Exception:
                    await message.answer(fail_text)
                    
        except ValueError as e:
            if "Insufficient funds" in str(e):
                await message.answer("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–≥—Ä–∞–±–ª–µ–Ω–∏—è!")
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ä–µ–¥—Å—Ç–≤!")
        except Exception as e:
            print(f"Robbery transaction error: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
            
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–≥—Ä–∞–±–ª–µ–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"Rob process error: {e}")
