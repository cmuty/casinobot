from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete
import json
from io import BytesIO
from datetime import datetime
from src.models import User, Bet, Transaction, UserAchievement, Wallet # –î–æ–±–∞–≤–ª–µ–Ω Wallet
from src.database import async_session_maker
from src.services.wallet_service import wallet_service
from src.services.bet_service import bet_service
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
from src.utils.keyboards import get_settings_keyboard, get_main_menu_keyboard
from src.states import DeletionStates
from src.utils.ban_check import check_if_banned

# –ù—É–∂–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å delete –∏–∑ sqlalchemy
from sqlalchemy import delete

router = Router()

# --- /settings (–∏ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä) ---
# –†–∞–±–æ—Ç–∞–µ—Ç –≤–µ–∑–¥–µ, –Ω–æ –≤ –≥—Ä—É–ø–ø–∞—Ö —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@router.message(Command('settings'))
async def cmd_settings(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ /settings"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    from src.database import async_session_maker
    telegram_id = message.from_user.id

    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –≤ –º–æ–¥–µ–ª–∏ –µ—Å—Ç—å language_code, –∏–Ω–∞—á–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 'ru')
    lang = getattr(user, 'language_code', 'ru')

    if message.chat.type in ['group', 'supergroup']:
        # –í –≥—Ä—É–ø–ø–µ ‚Äî —Ç–æ–ª—å–∫–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        await message.answer("‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.")
    else:
        # –í –õ–° ‚Äî —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await message.answer(
            "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.",
            reply_markup=get_settings_keyboard(lang),
            parse_mode='HTML'
        )

# –¢–ï–ö–°–¢–û–í–´–ô –¢–†–ò–ì–ì–ï–† –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(lambda message: message.text == '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏')
async def trigger_settings(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    # –ï—Å–ª–∏ –õ–° - –≤—ã–ø–æ–ª–Ω—è–µ–º –ª–æ–≥–∏–∫—É –∫–æ–º–∞–Ω–¥—ã settings (–±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤ –≥—Ä—É–ø–ø–µ, –æ–Ω–∞ –∏ —Ç–∞–∫ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –õ–°)
    from src.database import async_session_maker
    telegram_id = message.from_user.id

    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    lang = getattr(user, 'language_code', 'ru')

    await message.answer(
        "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –∞–∫–∫–∞—É–Ω—Ç–æ–º.",
        reply_markup=get_settings_keyboard(lang),
        parse_mode='HTML'
    )


# --- /export_data (–∏ üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä) ---
# –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°. –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî –∏–≥–Ω–æ—Ä.
@router.message(Command('export_data'))
async def cmd_export_data(message: Message):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (GDPR)"""
    from src.database import async_session_maker
    telegram_id = message.from_user.id

    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞
        if message.chat.type in ['group', 'supergroup']:
            # –í –≥—Ä—É–ø–ø–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer("üì¶ <b>–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö</b>\n\n–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö —Å –±–æ—Ç–æ–º.")
            return

        # –°–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        data = {
            'user_info': {
                'telegram_id': user.telegram_id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language': user.language_code,
                'created_at': user.created_at.isoformat() if user.created_at else None,
                'is_vip': user.is_vip,
                'personality': getattr(user, 'personality', 'playful') # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ø–æ–ª–µ –µ—Å—Ç—å
            },
            'wallet': {
                'balance': (await wallet_service.get_balance(user.id)) / 100,
                'currency': 'USD'
            },
            'statistics': {},
            'bets': [],
            'transactions': [],
            'achievements': []
        }

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        stats = await bet_service.get_user_stats(user.id)
        data['statistics'] = {
            'total_bets': stats['total_bets'],
            'total_wagered': stats['total_wagered_cents'] / 100,
            'total_won': stats['total_won_cents'] / 100,
            'win_rate': stats['winrate'],
        }

        # –°—Ç–∞–≤–∫–∏
        bets_result = await session.execute(
            select(Bet).where(Bet.user_id == user.id).order_by(Bet.created_at.desc()).limit(1000)
        )
        bets = bets_result.scalars().all()
        for bet in bets:
            data['bets'].append({
                'id': bet.id,
                'game_type': bet.game_type,
                'stake': bet.stake_cents / 100,
                'payout': bet.payout_cents / 100,
                'result': bet.result,
                'created_at': bet.created_at.isoformat()
            })

        # –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        transactions_result = await session.execute(
            select(Transaction).where(Transaction.user_id == user.id).order_by(Transaction.created_at.desc()).limit(1000)
        )
        transactions = transactions_result.scalars().all()
        for tx in transactions:
            data['transactions'].append({
                'id': tx.id,
                'type': tx.type,
                'amount': tx.amount_cents / 100,
                'status': tx.status,
                'meta': tx.meta,
                'created_at': tx.created_at.isoformat()
            })

        # –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è
        achievements_result = await session.execute(
            select(UserAchievement).where(UserAchievement.user_id == user.id)
        )
        achievements = achievements_result.scalars().all()
        for ach in achievements:
            data['achievements'].append({
                'code': ach.achievement_code,
                'unlocked_at': ach.unlocked_at.isoformat()
            })

        # –°–æ–∑–¥–∞–Ω–∏–µ JSON —Ñ–∞–π–ª–∞
        json_data = json.dumps(data, indent=2, ensure_ascii=False, default=str) # default=str –¥–ª—è datetime

        buffer = BytesIO(json_data.encode('utf-8'))
        buffer.name = f"luckystar_data_{user.telegram_id}.json"

        from aiogram.types import BufferedInputFile
        file = BufferedInputFile(buffer.getvalue(), filename=buffer.name)

        await message.answer_document(
            document=file,
            caption="üì¶ –í–æ—Ç –≤—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ LuckyStar Casino.\n\n–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )

# –¢–ï–ö–°–¢–û–í–´–ô –¢–†–ò–ì–ì–ï–† –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(lambda message: message.text == 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö')
async def trigger_export_data(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä 'üì¶ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    # –ï—Å–ª–∏ –õ–° - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    from src.database import async_session_maker
    telegram_id = message.from_user.id

    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

        # –°–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–∫–æ–ø–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ cmd_export_data)
        data = {
            'user_info': {
                'telegram_id': user.telegram_id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language': user.language_code,
                'created_at': user.created_at.isoformat() if user.created_at else None,
                'is_vip': user.is_vip,
                'personality': getattr(user, 'personality', 'playful')
            },
            'wallet': {
                'balance': (await wallet_service.get_balance(user.id)) / 100,
                'currency': 'USD'
            },
            'statistics': {},
            'bets': [],
            'transactions': [],
            'achievements': []
        }

        stats = await bet_service.get_user_stats(user.id)
        data['statistics'] = {
            'total_bets': stats['total_bets'],
            'total_wagered': stats['total_wagered_cents'] / 100,
            'total_won': stats['total_won_cents'] / 100,
            'win_rate': stats['winrate'],
        }

        bets_result = await session.execute(
            select(Bet).where(Bet.user_id == user.id).order_by(Bet.created_at.desc()).limit(1000)
        )
        bets = bets_result.scalars().all()
        for bet in bets:
            data['bets'].append({
                'id': bet.id,
                'game_type': bet.game_type,
                'stake': bet.stake_cents / 100,
                'payout': bet.payout_cents / 100,
                'result': bet.result,
                'created_at': bet.created_at.isoformat()
            })

        transactions_result = await session.execute(
            select(Transaction).where(Transaction.user_id == user.id).order_by(Transaction.created_at.desc()).limit(1000)
        )
        transactions = transactions_result.scalars().all()
        for tx in transactions:
            data['transactions'].append({
                'id': tx.id,
                'type': tx.type,
                'amount': tx.amount_cents / 100,
                'status': tx.status,
                'meta': tx.meta,
                'created_at': tx.created_at.isoformat()
            })

        achievements_result = await session.execute(
            select(UserAchievement).where(UserAchievement.user_id == user.id)
        )
        achievements = achievements_result.scalars().all()
        for ach in achievements:
            data['achievements'].append({
                'code': ach.achievement_code,
                'unlocked_at': ach.unlocked_at.isoformat()
            })

        json_data = json.dumps(data, indent=2, ensure_ascii=False, default=str)

        buffer = BytesIO(json_data.encode('utf-8'))
        buffer.name = f"luckystar_data_{user.telegram_id}.json"

        from aiogram.types import BufferedInputFile
        file = BufferedInputFile(buffer.getvalue(), filename=buffer.name)

        await message.answer_document(
            document=file,
            caption="üì¶ –í–æ—Ç –≤—Å–µ —Ç–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –≤ LuckyStar Casino.\n\n–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ–ª–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–≤–æ–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏."
        )


# --- /delete_account (–∏ üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç –∫–∞–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä) ---
# –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°. –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî –∏–≥–Ω–æ—Ä.
@router.message(Command('delete_account'))
async def cmd_delete_account(message: Message, state: FSMContext):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞ (GDPR)"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    from src.database import async_session_maker
    telegram_id = message.from_user.id

    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    await state.set_state(DeletionStates.confirm)

    await message.answer(
        "‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n\n"
        "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫\n"
        "‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏: <code>DELETE MY ACCOUNT</code>",
        parse_mode='HTML'
    )

# –¢–ï–ö–°–¢–û–í–´–ô –¢–†–ò–ì–ì–ï–† –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ - –∏–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç—Å—è –≤ –≥—Ä—É–ø–ø–∞—Ö
@router.message(lambda message: message.text == 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç')
async def trigger_delete_account(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ç—Ä–∏–≥–≥–µ—Ä 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∞–∫–∫–∞—É–Ω—Ç'"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º)
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return
    # –ï—Å–ª–∏ –õ–° - –≤—ã–ø–æ–ª–Ω—è–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É, —á—Ç–æ –∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
    from src.database import async_session_maker
    telegram_id = message.from_user.id

    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    await state.set_state(DeletionStates.confirm)

    await message.answer(
        "‚ö†Ô∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –∞–∫–∫–∞—É–Ω—Ç–∞</b>\n\n"
        "–¢—ã —É–≤–µ—Ä–µ–Ω, —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç?\n\n"
        "–ë—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã:\n"
        "‚Ä¢ –ü—Ä–æ—Ñ–∏–ª—å –∏ –±–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞–≤–æ–∫\n"
        "‚Ä¢ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è\n"
        "‚Ä¢ –í—Å–µ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n\n"
        "‚ùó –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
        "–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–≤–µ–¥–∏: <code>DELETE MY ACCOUNT</code>",
        parse_mode='HTML'
    )


# --- FSM –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è ---
# –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°. –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî –∏–≥–Ω–æ—Ä.
@router.message(DeletionStates.confirm)
async def confirm_deletion(message: Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        await state.clear() # –°–±—Ä–æ—Å–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–æ
        return

    from src.database import async_session_maker
    telegram_id = message.from_user.id

    if message.text != "DELETE MY ACCOUNT":
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ. –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        await state.clear()
        return

    await message.answer("üì¶ –°–æ–∑–¥–∞—ë–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö...")

    # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö (–ø–æ–≤—Ç–æ—Ä–Ω–æ) - –ü–û–õ–ù–û–°–¢–¨–Æ –ö–û–ü–ò–†–£–ï–ú –ö–û–î –ò–ó cmd_export_data
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            await state.clear()
            return

        # –°–±–æ—Ä–∫–∞ –¥–∞–Ω–Ω—ã—Ö (–ø–æ–≤—Ç–æ—Ä –∫–æ–¥–∞ –∏–∑ cmd_export_data)
        data = {
            'user_info': {
                'telegram_id': user.telegram_id,
                'username': user.username,
                'first_name': user.first_name,
                'last_name': user.last_name,
                'language': user.language_code,
                'created_at': user.created_at.isoformat() if user.created_at else None,
                'is_vip': user.is_vip,
                'personality': getattr(user, 'personality', 'playful')
            },
            'wallet': {
                'balance': (await wallet_service.get_balance(user.id)) / 100,
                'currency': 'USD'
            },
            'statistics': {},
            'bets': [],
            'transactions': [],
            'achievements': []
        }

        stats = await bet_service.get_user_stats(user.id)
        data['statistics'] = {
            'total_bets': stats['total_bets'],
            'total_wagered': stats['total_wagered_cents'] / 100,
            'total_won': stats['total_won_cents'] / 100,
            'win_rate': stats['winrate'],
        }

        bets_result = await session.execute(
            select(Bet).where(Bet.user_id == user.id).order_by(Bet.created_at.desc()).limit(1000)
        )
        bets = bets_result.scalars().all()
        for bet in bets:
            data['bets'].append({
                'id': bet.id,
                'game_type': bet.game_type,
                'stake': bet.stake_cents / 100,
                'payout': bet.payout_cents / 100,
                'result': bet.result,
                'created_at': bet.created_at.isoformat()
            })

        transactions_result = await session.execute(
            select(Transaction).where(Transaction.user_id == user.id).order_by(Transaction.created_at.desc()).limit(1000)
        )
        transactions = transactions_result.scalars().all()
        for tx in transactions:
            data['transactions'].append({
                'id': tx.id,
                'type': tx.type,
                'amount': tx.amount_cents / 100,
                'status': tx.status,
                'meta': tx.meta,
                'created_at': tx.created_at.isoformat()
            })

        achievements_result = await session.execute(
            select(UserAchievement).where(UserAchievement.user_id == user.id)
        )
        achievements = achievements_result.scalars().all()
        for ach in achievements:
            data['achievements'].append({
                'code': ach.achievement_code,
                'unlocked_at': ach.unlocked_at.isoformat()
            })

        json_data = json.dumps(data, indent=2, ensure_ascii=False, default=str)
        buffer = BytesIO(json_data.encode('utf-8'))
        buffer.name = f"luckystar_data_{user.telegram_id}_before_deletion.json"
        from aiogram.types import BufferedInputFile
        file = BufferedInputFile(buffer.getvalue(), filename=buffer.name)
        await message.answer_document(
            document=file,
            caption="üì¶ –§–∏–Ω–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º."
        )

    # –£–¥–∞–ª–µ–Ω–∏–µ
    await message.answer("üóëÔ∏è –£–¥–∞–ª—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ...")

    # –ü–†–ê–í–ò–õ–¨–ù–û–ï –£–î–ê–õ–ï–ù–ò–ï:
    async with async_session_maker() as session:
        # 1. –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        await session.execute(
            delete(Transaction).where(Transaction.user_id == user.id)
        )
        # 2. –£–¥–∞–ª—è–µ–º –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
        # await session.execute(
        #     delete(UserAchievement).where(UserAchievement.user_id == user.id)
        # )
        # 3. –£–¥–∞–ª—è–µ–º —Å—Ç–∞–≤–∫–∏
        await session.execute(
            delete(Bet).where(Bet.user_id == user.id)
        )
        # 4. –£–¥–∞–ª—è–µ–º –∫–æ—à–µ–ª—ë–∫ (–≤–∞–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –¥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å ON DELETE CASCADE –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏)
        await session.execute(
            delete(Wallet).where(Wallet.user_id == user.id)
        )
        # 5. –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await session.execute(
            delete(User).where(User.telegram_id == telegram_id)
        )

        await session.commit() # –ö–æ–º–º–∏—Ç–∏–º –≤—Å–µ —É–¥–∞–ª–µ–Ω–∏—è –≤–º–µ—Å—Ç–µ

    await message.answer(
        "‚úÖ –¢–≤–æ–π –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.\n\n"
        "–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –±—ã–ª —Å –Ω–∞–º–∏! –ï—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è ‚Äî –º—ã –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å. üëã"
    )

    await state.clear()

# --- "üîô –ù–∞–∑–∞–¥" ---
# –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –õ–°. –í –≥—Ä—É–ø–ø–∞—Ö ‚Äî –∏–≥–Ω–æ—Ä.
@router.message(lambda message: message.text == 'üîô –ù–∞–∑–∞–¥')
async def cmd_back_to_main(message: Message):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞: –µ—Å–ª–∏ –≥—Ä—É–ø–ø–∞ ‚Äî –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if message.chat.type in ['group', 'supergroup']:
        # –ù–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º, –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
        return

    from src.database import async_session_maker
    telegram_id = message.from_user.id

    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()

        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∫ –≤ /balance)
    balance = await wallet_service.get_balance(user.id)
    lang = getattr(user, 'language_code', 'ru')

    text = f"üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–æ –≤ <b>–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é (—Ç–æ–ª—å–∫–æ –≤ –õ–°)
    await message.answer(
        text,
        reply_markup=get_main_menu_keyboard(lang), # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        parse_mode='HTML'
    )
