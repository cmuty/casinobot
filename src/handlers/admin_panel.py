from aiogram import Router, F, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from sqlalchemy import select, delete as sql_delete, func, and_
from datetime import datetime, timedelta

from src.models import User, Bet, Wallet
from src.config import settings
from src.states import AdminStates
from src.services.wallet_service import wallet_service
from src.utils.keyboards import (
    get_admin_panel_keyboard,
    get_admin_users_keyboard,
    get_admin_banned_keyboard,
    get_admin_back_keyboard
)

router = Router()


def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == settings.ADMIN_ID


async def notify_user(bot: Bot, user_telegram_id: int, message_text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        await bot.send_message(chat_id=user_telegram_id, text=message_text, parse_mode='HTML')
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_telegram_id}: {e}")


# --- –ì–õ–ê–í–ù–ê–Ø –ö–û–ú–ê–ù–î–ê –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò ---

@router.callback_query(F.data == "admin:panel")
async def show_admin_panel(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_panel_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin:main")
async def back_to_admin_main(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω—É—é –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîê <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_admin_panel_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin:close")
async def close_admin_panel(callback: CallbackQuery):
    """–ó–∞–∫—Ä—ã–≤–∞–µ—Ç –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"""
    await callback.message.delete()
    await callback.answer()


# --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø–ú–ò ---

@router.callback_query(F.data == "admin:users")
async def show_users_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üë• <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_users_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin:user_search")
async def start_user_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üîç <b>–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_admin_back_keyboard()
    )
    await state.set_state(AdminStates.waiting_user_id_search)
    await callback.answer()


@router.message(AdminStates.waiting_user_id_search)
async def process_user_search(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == user_telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_telegram_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_users_keyboard()
            )
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –±–∞–ª–∞–Ω—Å
        balance = await wallet_service.get_balance(user.id)
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç–∞–≤–æ–∫
        bets_result = await session.execute(
            select(Bet).where(Bet.user_id == user.id)
            .order_by(Bet.created_at.desc())
            .limit(10)
        )
        bets = bets_result.scalars().all()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ</b>\n\n"
        text += f"üÜî Telegram ID: <code>{user.telegram_id}</code>\n"
        text += f"üë§ –ò–º—è: {user.first_name or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        if user.username:
            text += f"üìù Username: @{user.username}\n"
        text += f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>${balance / 100:.2f}</b>\n"
        text += f"‚≠ê VIP: {'–î–∞' if user.is_vip else '–ù–µ—Ç'}\n"
        text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω: {'–î–∞' if user.is_banned else '–ù–µ—Ç'}\n"
        text += f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user.created_at.strftime('%d.%m.%Y %H:%M')}\n\n"
        
        if bets:
            text += "üìä <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Å—Ç–∞–≤–æ–∫:</b>\n"
            for i, bet in enumerate(bets, 1):
                result_emoji = "‚úÖ" if bet.payout_cents > 0 else "‚ùå"
                profit = bet.payout_cents - bet.stake_cents
                text += f"{i}. {result_emoji} {bet.game_type.upper()} | "
                text += f"–°—Ç–∞–≤–∫–∞: ${bet.stake_cents / 100:.2f} | "
                text += f"{'–í—ã–∏–≥—Ä—ã—à' if profit > 0 else '–ü—Ä–æ–∏–≥—Ä—ã—à'}: ${abs(profit) / 100:.2f}\n"
        else:
            text += "üìä <b>–°—Ç–∞–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç</b>\n"
        
        await message.answer(text, reply_markup=get_admin_users_keyboard())
    
    await state.clear()


@router.callback_query(F.data == "admin:user_delete")
async def start_user_delete(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "‚ö†Ô∏è <b>–í–ù–ò–ú–ê–ù–ò–ï!</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–æ–±—Ä–∞—Ç–∏–º–æ!\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=get_admin_back_keyboard()
    )
    await state.set_state(AdminStates.waiting_user_id_delete)
    await callback.answer()


@router.message(AdminStates.waiting_user_id_delete)
async def process_user_delete(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        result = await session.execute(
            select(User).where(User.telegram_id == user_telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_telegram_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_users_keyboard()
            )
            await state.clear()
            return
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user(
            bot,
            user_telegram_id,
            "‚ö†Ô∏è <b>–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º</b>\n\n"
            "–ï—Å–ª–∏ –≤—ã —Å—á–∏—Ç–∞–µ—Ç–µ —ç—Ç–æ –æ—à–∏–±–∫–æ–π, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        )
        
        # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∫–∞—Å–∫–∞–¥–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∏—Ç —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏)
        await session.delete(user)
        await session.commit()
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id}</code> —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=get_admin_users_keyboard()
        )
    
    await state.clear()


@router.callback_query(F.data == "admin:user_add_balance")
async def start_add_balance(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üí∞ <b>–í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_admin_back_keyboard()
    )
    await state.set_state(AdminStates.waiting_user_id_add_balance)
    await callback.answer()


@router.message(AdminStates.waiting_user_id_add_balance)
async def process_add_balance_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_telegram_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_users_keyboard()
            )
            await state.clear()
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(user_id=user.id, user_telegram_id=user_telegram_id)
        await message.answer(
            f"üíµ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö):\n\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>100</code> (–¥–ª—è $100.00)"
        )
        await state.set_state(AdminStates.waiting_amount_add_balance)


@router.message(AdminStates.waiting_amount_add_balance)
async def process_add_balance_amount(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã –¥–ª—è –≤—ã–¥–∞—á–∏ –≤–∞–ª—é—Ç—ã"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        amount_dollars = float(message.text.strip())
        amount_cents = int(amount_dollars * 100)
        
        if amount_cents <= 0:
            await message.answer("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    user_id = data.get('user_id')
    user_telegram_id = data.get('user_telegram_id')
    
    # –ù–∞—á–∏—Å–ª—è–µ–º –≤–∞–ª—é—Ç—É
    await wallet_service.add_funds(user_id, amount_cents, "admin_add")
    new_balance = await wallet_service.get_balance(user_id)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await notify_user(
        bot,
        user_telegram_id,
        f"üí∞ <b>–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ —Å—Ä–µ–¥—Å—Ç–≤</b>\n\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–∞—á–∏—Å–ª–∏–ª –≤–∞–º <b>${amount_dollars:.2f}</b>\n"
        f"üíµ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${new_balance / 100:.2f}</b>"
    )
    
    await message.answer(
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–æ <b>${amount_dollars:.2f}</b> –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é <code>{user_telegram_id}</code>\n"
        f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${new_balance / 100:.2f}</b>",
        reply_markup=get_admin_users_keyboard()
    )
    
    await state.clear()


@router.callback_query(F.data == "admin:user_set_balance")
async def start_set_balance(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚úèÔ∏è <b>–ò–∑–º–µ–Ω–∏—Ç—å –≤–∞–ª—é—Ç—É</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_admin_back_keyboard()
    )
    await state.set_state(AdminStates.waiting_user_id_set_balance)
    await callback.answer()


@router.message(AdminStates.waiting_user_id_set_balance)
async def process_set_balance_user_id(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_telegram_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_users_keyboard()
            )
            await state.clear()
            return
        
        current_balance = await wallet_service.get_balance(user.id)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(
            user_id=user.id,
            user_telegram_id=user_telegram_id,
            old_balance=current_balance
        )
        await message.answer(
            f"üíµ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: <b>${current_balance / 100:.2f}</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É (–≤ –¥–æ–ª–ª–∞—Ä–∞—Ö):\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>500</code> (–¥–ª—è $500.00)"
        )
        await state.set_state(AdminStates.waiting_amount_set_balance)


@router.message(AdminStates.waiting_amount_set_balance)
async def process_set_balance_amount(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—É–º–º—ã –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        new_amount_dollars = float(message.text.strip())
        new_amount_cents = int(new_amount_dollars * 100)
        
        if new_amount_cents < 0:
            await message.answer("‚ùå –°—É–º–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!")
            return
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    data = await state.get_data()
    user_id = data.get('user_id')
    user_telegram_id = data.get('user_telegram_id')
    old_balance = data.get('old_balance')
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
    await wallet_service.set_balance(user_id, new_amount_cents)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    difference = new_amount_cents - old_balance
    if difference > 0:
        action_text = f"—É–≤–µ–ª–∏—á–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${abs(difference) / 100:.2f}</b>"
    elif difference < 0:
        action_text = f"—É–º–µ–Ω—å—à–∏–ª –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞ <b>${abs(difference) / 100:.2f}</b>"
    else:
        action_text = "—É—Å—Ç–∞–Ω–æ–≤–∏–ª —Ç–æ—Ç –∂–µ –±–∞–ª–∞–Ω—Å"
    
    await notify_user(
        bot,
        user_telegram_id,
        f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞</b>\n\n"
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {action_text}\n"
        f"üíµ –í–∞—à –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${new_amount_cents / 100:.2f}</b>"
    )
    
    await message.answer(
        f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è <code>{user_telegram_id}</code> –∏–∑–º–µ–Ω–µ–Ω\n"
        f"–°—Ç–∞—Ä—ã–π –±–∞–ª–∞–Ω—Å: <b>${old_balance / 100:.2f}</b>\n"
        f"–ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>${new_amount_cents / 100:.2f}</b>",
        reply_markup=get_admin_users_keyboard()
    )
    
    await state.clear()


# --- –ë–õ–û–ö–ò–†–û–í–ö–ò ---

@router.callback_query(F.data == "admin:banned")
async def show_banned_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üö´ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_admin_banned_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "admin:banned_list")
async def show_banned_list(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.is_banned == True).order_by(User.created_at.desc())
        )
        banned_users = result.scalars().all()
        
        if not banned_users:
            await callback.message.edit_text(
                "üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
                "‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
                reply_markup=get_admin_banned_keyboard()
            )
        else:
            text = f"üìã <b>–°–ø–∏—Å–æ–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            text += f"–í—Å–µ–≥–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: <b>{len(banned_users)}</b>\n\n"
            
            for i, user in enumerate(banned_users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 20
                text += f"{i}. ID: <code>{user.telegram_id}</code>"
                if user.username:
                    text += f" | @{user.username}"
                if user.first_name:
                    text += f" | {user.first_name}"
                text += "\n"
            
            if len(banned_users) > 20:
                text += f"\n... –∏ –µ—â–µ {len(banned_users) - 20}"
            
            await callback.message.edit_text(text, reply_markup=get_admin_banned_keyboard())
    
    await callback.answer()


@router.callback_query(F.data == "admin:ban_user")
async def start_ban_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üö´ <b>–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_admin_back_keyboard()
    )
    await state.set_state(AdminStates.waiting_user_id_ban)
    await callback.answer()


@router.message(AdminStates.waiting_user_id_ban)
async def process_ban_user(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_telegram_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_banned_keyboard()
            )
            await state.clear()
            return
        
        if user.is_banned:
            await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id}</code> —É–∂–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=get_admin_banned_keyboard()
            )
            await state.clear()
            return
        
        # –ë–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.is_banned = True
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user(
            bot,
            user_telegram_id,
            "üö´ <b>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ</b>\n\n"
            "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –æ–≥—Ä–∞–Ω–∏—á–µ–Ω.\n"
            "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."
        )
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id}</code> —É—Å–ø–µ—à–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_admin_banned_keyboard()
        )
    
    await state.clear()


@router.callback_query(F.data == "admin:unban_user")
async def start_unban_user(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "‚úÖ <b>–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏:",
        reply_markup=get_admin_back_keyboard()
    )
    await state.set_state(AdminStates.waiting_user_id_unban)
    await callback.answer()


@router.message(AdminStates.waiting_user_id_unban)
async def process_unban_user(message: Message, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if not is_admin(message.from_user.id):
        return
    
    try:
        user_telegram_id = int(message.text.strip())
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(
            select(User).where(User.telegram_id == user_telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await message.answer(
                f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID <code>{user_telegram_id}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω.",
                reply_markup=get_admin_banned_keyboard()
            )
            await state.clear()
            return
        
        if not user.is_banned:
            await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id}</code> –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
                reply_markup=get_admin_banned_keyboard()
            )
            await state.clear()
            return
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user.is_banned = False
        await session.commit()
        
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await notify_user(
            bot,
            user_telegram_id,
            "‚úÖ <b>–í—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!</b>\n\n"
            "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! üé∞"
        )
        
        await message.answer(
            f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{user_telegram_id}</code> —É—Å–ø–µ—à–Ω–æ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.",
            reply_markup=get_admin_banned_keyboard()
        )
    
    await state.clear()


@router.callback_query(F.data == "admin:amnesty")
async def process_amnesty(callback: CallbackQuery, bot: Bot):
    """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–º–Ω–∏—Å—Ç–∏—è)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        result = await session.execute(
            select(User).where(User.is_banned == True)
        )
        banned_users = result.scalars().all()
        
        if not banned_users:
            await callback.answer("‚úÖ –ù–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", show_alert=True)
            return
        
        count = len(banned_users)
        
        # –†–∞–∑–±–ª–æ–∫–∏—Ä—É–µ–º –≤—Å–µ—Ö
        for user in banned_users:
            user.is_banned = False
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–∞–∂–¥–æ–≥–æ
            await notify_user(
                bot,
                user.telegram_id,
                "üïäÔ∏è <b>–ê–ú–ù–ò–°–¢–ò–Ø!</b>\n\n"
                "–í—ã –±—ã–ª–∏ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ —Ä–∞–º–∫–∞—Ö –æ–±—â–µ–π –∞–º–Ω–∏—Å—Ç–∏–∏.\n"
                "–î–æ—Å—Ç—É–ø –∫ –±–æ—Ç—É –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.\n"
                "–ü—Ä–∏—è—Ç–Ω–æ–π –∏–≥—Ä—ã! üé∞"
            )
        
        await session.commit()
        
        await callback.message.edit_text(
            f"üïäÔ∏è <b>–ê–º–Ω–∏—Å—Ç–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!</b>\n\n"
            f"–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{count}</b>",
            reply_markup=get_admin_banned_keyboard()
        )
    
    await callback.answer()


# --- –ê–ö–¢–ò–í–ù–´–ï –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò ---

@router.callback_query(F.data == "admin:active")
async def show_active_users(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    time_threshold = datetime.utcnow() - timedelta(minutes=15)
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —Å–¥–µ–ª–∞–≤—à–∏—Ö —Å—Ç–∞–≤–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç
        result = await session.execute(
            select(User)
            .join(Bet)
            .where(Bet.created_at >= time_threshold)
            .distinct()
            .order_by(Bet.created_at.desc())
        )
        active_users = result.scalars().all()
        
        if not active_users:
            await callback.message.edit_text(
                "üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
                "‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏",
                reply_markup=get_admin_back_keyboard()
            )
        else:
            text = f"üìä <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</b>\n\n"
            text += f"‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –º–∏–Ω—É—Ç\n"
            text += f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{len(active_users)}</b>\n\n"
            
            for i, user in enumerate(active_users[:20], 1):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 20
                text += f"{i}. ID: <code>{user.telegram_id}</code>"
                if user.username:
                    text += f" | @{user.username}"
                if user.first_name:
                    text += f" | {user.first_name}"
                text += "\n"
            
            if len(active_users) > 20:
                text += f"\n... –∏ –µ—â–µ {len(active_users) - 20}"
            
            await callback.message.edit_text(text, reply_markup=get_admin_back_keyboard())
    
    await callback.answer()


# --- –°–¢–ê–¢–ò–°–¢–ò–ö–ê ---

@router.callback_query(F.data == "admin:stats")
async def show_stats(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –±–æ—Ç–∞"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    from src.database import async_session_maker
    async with async_session_maker() as session:
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        total_users_result = await session.execute(select(func.count(User.id)))
        total_users = total_users_result.scalar()
        
        # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
        banned_users_result = await session.execute(
            select(func.count(User.id)).where(User.is_banned == True)
        )
        banned_users = banned_users_result.scalar()
        
        # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç–∞–≤–æ–∫
        total_bets_result = await session.execute(select(func.count(Bet.id)))
        total_bets = total_bets_result.scalar()
        
        # –û–±—â–∞—è —Å—É–º–º–∞ —Å—Ç–∞–≤–æ–∫
        total_wagered_result = await session.execute(select(func.sum(Bet.stake_cents)))
        total_wagered = total_wagered_result.scalar() or 0
        
        # –û–±—â–∞—è —Å—É–º–º–∞ –≤—ã–ø–ª–∞—Ç
        total_payout_result = await session.execute(select(func.sum(Bet.payout_cents)))
        total_payout = total_payout_result.scalar() or 0
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        time_threshold = datetime.utcnow() - timedelta(hours=24)
        active_24h_result = await session.execute(
            select(func.count(func.distinct(Bet.user_id)))
            .where(Bet.created_at >= time_threshold)
        )
        active_24h = active_24h_result.scalar()
        
        text = f"üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞</b>\n\n"
        text += f"üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <b>{total_users}</b>\n"
        text += f"üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: <b>{banned_users}</b>\n"
        text += f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞ 24—á: <b>{active_24h}</b>\n\n"
        text += f"üé∞ –í—Å–µ–≥–æ —Å—Ç–∞–≤–æ–∫: <b>{total_bets}</b>\n"
        text += f"üí∞ –í—Å–µ–≥–æ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ: <b>${total_wagered / 100:,.2f}</b>\n"
        text += f"üí∏ –í—Å–µ–≥–æ –≤—ã–ø–ª–∞—á–µ–Ω–æ: <b>${total_payout / 100:,.2f}</b>\n"
        
        profit = total_wagered - total_payout
        text += f"üìä –ü—Ä–∏–±—ã–ª—å: <b>${profit / 100:,.2f}</b>"
        
        await callback.message.edit_text(text, reply_markup=get_admin_back_keyboard())
    
    await callback.answer()


# --- –†–ê–°–°–´–õ–ö–ê ---

@router.callback_query(F.data == "admin:broadcast")
async def show_broadcast_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞—Å—Å—ã–ª–∫–∏ (–∑–∞–≥–ª—É—à–∫–∞)"""
    if not is_admin(callback.from_user.id):
        await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return
    
    await callback.message.edit_text(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞</b>\n\n"
        "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ",
        reply_markup=get_admin_back_keyboard()
    )
    await callback.answer()

