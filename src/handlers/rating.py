from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from sqlalchemy import select
from datetime import datetime

from src.models import User
from src.services.rating_service import RatingService, CreditService, VIPService
from src.services.wallet_service import wallet_service
from src.utils.keyboards import get_back_keyboard
from src.utils.ban_check import check_if_banned

router = Router()


@router.message(Command('rating'))
async def cmd_rating(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–æ–≤ (–∞–ª–∏–∞—Å –¥–ª—è leaderboard)"""
    await cmd_leaderboard(message)


@router.message(Command('leaderboard'))
async def cmd_leaderboard(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞"""
    if await check_if_banned(message):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —á–∞—Ç–∞ - —Ç–æ–ª—å–∫–æ –¥–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    if message.chat.type in ['group', 'supergroup']:
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –î–Ω–µ–≤–Ω–æ–π", callback_data="leaderboard:daily")],
        [InlineKeyboardButton(text="üìä –ù–µ–¥–µ–ª—å–Ω—ã–π", callback_data="leaderboard:weekly")],
        [InlineKeyboardButton(text="üèÜ –ú–µ—Å—è—á–Ω—ã–π", callback_data="leaderboard:monthly")],
        [InlineKeyboardButton(text="üéÅ –ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="leaderboard:rewards")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ])
    
    text = (
        "üèÜ <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã LuckyStar Casino</b>\n\n"
        "üìÖ <b>–î–Ω–µ–≤–Ω–æ–π</b> - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –¥–µ–Ω—å\n"
        "üìä <b>–ù–µ–¥–µ–ª—å–Ω—ã–π</b> - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üèÜ <b>–ú–µ—Å—è—á–Ω—ã–π</b> - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n\n"
        "üí° <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –º–µ—Å—Ç–∞:</b>\n"
        "ü•á 1 –º–µ—Å—Ç–æ - $1500\n"
        "ü•à 2 –º–µ—Å—Ç–æ - $700\n"
        "ü•â 3 –º–µ—Å—Ç–æ - $400"
    )
    
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "leaderboard:menu")
async def show_leaderboard_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é –ª–∏–¥–µ—Ä–±–æ—Ä–¥–æ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –î–Ω–µ–≤–Ω–æ–π", callback_data="leaderboard:daily")],
        [InlineKeyboardButton(text="üìä –ù–µ–¥–µ–ª—å–Ω—ã–π", callback_data="leaderboard:weekly")],
        [InlineKeyboardButton(text="üèÜ –ú–µ—Å—è—á–Ω—ã–π", callback_data="leaderboard:monthly")],
        [InlineKeyboardButton(text="üéÅ –ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã", callback_data="leaderboard:rewards")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
    ])
    
    text = (
        "üèÜ <b>–õ–∏–¥–µ—Ä–±–æ—Ä–¥—ã</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ –∏–≥—Ä–æ–∫–æ–≤:\n\n"
        "üìÖ <b>–î–Ω–µ–≤–Ω–æ–π</b> - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "üìä <b>–ù–µ–¥–µ–ª—å–Ω—ã–π</b> - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é\n"
        "üèÜ <b>–ú–µ—Å—è—á–Ω—ã–π</b> - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –º–µ—Å—è—Ü\n\n"
        "üí° <b>–ù–∞–≥—Ä–∞–¥—ã –∑–∞ –º–µ—Å—Ç–∞:</b>\n"
        "ü•á 1 –º–µ—Å—Ç–æ - $1500\n"
        "ü•à 2 –º–µ—Å—Ç–æ - $700\n"
        "ü•â 3 –º–µ—Å—Ç–æ - $400"
    )
    
    try:
        await callback.message.edit_text(text, reply_markup=keyboard)
    except:
        await callback.message.answer(text, reply_markup=keyboard)
    
    await callback.answer()


@router.callback_query(F.data.startswith("leaderboard:"))
async def show_leaderboard(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ª–∏–¥–µ—Ä–±–æ—Ä–¥ –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    if callback.data == "leaderboard:rewards":
        await show_user_rewards(callback)
        return
    
    period = callback.data.split(":")[1]
    period_names = {
        'daily': '–¥–Ω–µ–≤–Ω–æ–π',
        'weekly': '–Ω–µ–¥–µ–ª—å–Ω—ã–π', 
        'monthly': '–º–µ—Å—è—á–Ω—ã–π'
    }
    
    leaderboard = await RatingService.get_leaderboard(period, 10)
    
    if not leaderboard:
        text = f"üìä <b>{period_names[period].title()} –ª–∏–¥–µ—Ä–±–æ—Ä–¥</b>\n\n‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —ç—Ç–æ—Ç –ø–µ—Ä–∏–æ–¥"
    else:
        text = f"üìä <b>{period_names[period].title()} –ª–∏–¥–µ—Ä–±–æ—Ä–¥</b>\n\n"
        
        medals = ["ü•á", "ü•à", "ü•â", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
        
        for i, player in enumerate(leaderboard):
            medal = medals[i] if i < len(medals) else f"{i+1}."
            username = player['username'] or player['first_name'] or f"User{player['user_id']}"
            winnings = player['total_winnings'] / 100
            win_rate = player['win_rate']
            
            text += f"{medal} <b>{username}</b>\n"
            text += f"   üí∞ –í—ã–∏–≥—Ä—ã—à: ${winnings:.2f}\n"
            text += f"   üìà –í–∏–Ω—Ä–µ–π—Ç: {win_rate}%\n"
            text += f"   üéÆ –ò–≥—Ä: {player['total_bets']}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="leaderboard:menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()


@router.callback_query(F.data == "leaderboard:rewards")
async def show_user_rewards(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == user_id))
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
    
    rewards = await RatingService.get_user_rewards(user.id)
    
    if not rewards:
        text = "üéÅ <b>–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã</b>\n\n‚ùå –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–≥—Ä–∞–¥"
    else:
        text = "üéÅ <b>–ú–æ–∏ –Ω–∞–≥—Ä–∞–¥—ã</b>\n\n"
        
        for reward in rewards:
            position_medals = {1: "ü•á", 2: "ü•à", 3: "ü•â"}
            medal = position_medals.get(reward['position'], f"{reward['position']}.")
            amount = reward['amount'] / 100
            period_names = {'daily': '–¥–Ω–µ–≤–Ω–æ–π', 'weekly': '–Ω–µ–¥–µ–ª—å–Ω—ã–π', 'monthly': '–º–µ—Å—è—á–Ω—ã–π'}
            period = period_names.get(reward['period'], reward['period'])
            status = "‚úÖ –ü–æ–ª—É—á–µ–Ω–æ" if reward['is_claimed'] else "‚è≥ –û–∂–∏–¥–∞–µ—Ç"
            
            text += f"{medal} <b>{period.title()} –ª–∏–¥–µ—Ä–±–æ—Ä–¥</b>\n"
            text += f"   üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${amount:.0f}\n"
            text += f"   üìÖ –î–∞—Ç–∞: {reward['rewarded_at'].strftime('%d.%m.%Y')}\n"
            text += f"   {status}\n\n"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="leaderboard:menu")]
    ])
    
    await callback.message.edit_text(text, reply_markup=keyboard)
    await callback.answer()




@router.callback_query(F.data == "back_to_profile")
async def back_to_profile(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–æ—Ñ–∏–ª—é"""
    await callback.answer()
    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –ø—Ä–æ—Ñ–∏–ª—è
    from src.handlers.profile import cmd_profile
    await cmd_profile(callback.message)


@router.callback_query(F.data == "credits:menu")
async def credits_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    if await check_if_banned(callback):
        return
    
    from src.database import get_session
    from src.models import User
    from src.services.rating_service import CreditService
    
    telegram_id = callback.from_user.id
    
    async for session in get_session():
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not user.is_vip:
            await callback.answer("‚ùå –ö—Ä–µ–¥–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        available_credits = await CreditService.get_available_credits(user.id)
        
        text = "üí≥ <b>–°–∏—Å—Ç–µ–º–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤</b>\n\n"
        text += "üí∞ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã:</b>\n"
        
        if available_credits:
            for credit in available_credits:
                amount = credit['amount'] / 100
                limit_type = credit['limit_type']
                
                if limit_type == 'daily_1k':
                    text += f"‚îú üíµ $1000 (–∫–∞–∂–¥—ã–µ 3 –¥–Ω—è)\n"
                elif limit_type == 'weekly_5k':
                    text += f"‚îú üí∞ $5000 (–∫–∞–∂–¥—É—é –Ω–µ–¥–µ–ª—é)\n"
                elif limit_type == 'monthly_15k':
                    text += f"‚îú üíé $15000 (–∫–∞–∂–¥—ã–π –º–µ—Å—è—Ü)\n"
        else:
            text += "‚îú ‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤\n"
        
        text += "\nüí° <b>–£—Å–ª–æ–≤–∏—è:</b>\n"
        text += "‚îú üìÖ –í–æ–∑–≤—Ä–∞—Ç —á–µ—Ä–µ–∑ 7 –¥–Ω–µ–π\n"
        text += "‚îú üìà –ü—Ä–æ—Ü–µ–Ω—Ç: 10%\n"
        text += "‚îî ‚ö†Ô∏è –ü—Ä–∏ –ø—Ä–æ—Å—Ä–æ—á–∫–µ: –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üíµ –í–∑—è—Ç—å $1000", callback_data="credit:take:1000")],
            [InlineKeyboardButton(text="üí∞ –í–∑—è—Ç—å $5000", callback_data="credit:take:5000")],
            [InlineKeyboardButton(text="üíé –í–∑—è—Ç—å $15000", callback_data="credit:take:15000")],
            [InlineKeyboardButton(text="üìã –ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã", callback_data="credit:list")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ])
        
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except:
            await callback.message.answer(text, reply_markup=keyboard)
        
        await callback.answer()


@router.callback_query(F.data.startswith("credit:take:"))
async def take_credit(callback: CallbackQuery):
    """–í–∑—è—Ç–∏–µ –∫—Ä–µ–¥–∏—Ç–∞"""
    if await check_if_banned(callback):
        return
    
    from src.database import get_session
    from src.models import User
    from src.services.rating_service import CreditService
    from src.services.wallet_service import wallet_service
    
    telegram_id = callback.from_user.id
    amount_str = callback.data.split(":")[2]
    amount_cents = int(amount_str) * 100
    
    async for session in get_session():
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not user.is_vip:
            await callback.answer("‚ùå –ö—Ä–µ–¥–∏—Ç—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            return
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –ª–∏–º–∏—Ç–∞
        if amount_cents == 100000:  # $1000
            limit_type = 'daily_1k'
        elif amount_cents == 500000:  # $5000
            limit_type = 'weekly_5k'
        elif amount_cents == 1500000:  # $15000
            limit_type = 'monthly_15k'
        else:
            await callback.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –∫—Ä–µ–¥–∏—Ç–∞")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫—Ä–µ–¥–∏—Ç–∞
        success = await CreditService.take_credit(user.id, amount_cents, limit_type)
        
        if success:
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
            await wallet_service.credit(user.id, amount_cents, "credit")
            
            await callback.answer(f"‚úÖ –ö—Ä–µ–¥–∏—Ç ${amount_str} –≤—ã–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é –∫—Ä–µ–¥–∏—Ç–æ–≤
            await credits_menu(callback)
        else:
            await callback.answer("‚ùå –ö—Ä–µ–¥–∏—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–∏–º–∏—Ç—ã.")


@router.callback_query(F.data == "credit:list")
async def list_credits(callback: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if await check_if_banned(callback):
        return
    
    from src.database import get_session
    from src.models import User
    from src.services.rating_service import CreditService
    
    telegram_id = callback.from_user.id
    
    async for session in get_session():
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã
        active_credits = await CreditService.get_user_credits(user.id)
        
        text = "üìã <b>–ú–æ–∏ –∫—Ä–µ–¥–∏—Ç—ã</b>\n\n"
        
        keyboard_buttons = []
        
        if active_credits:
            for credit in active_credits:
                amount = credit['amount'] / 100
                amount_to_repay = credit['amount_to_repay'] / 100
                status_icons = {
                    'active': 'üü¢',
                    'overdue': 'üî¥',
                    'paid': '‚úÖ'
                }
                status_text = {
                    'active': '–ê–∫—Ç–∏–≤–Ω—ã–π',
                    'overdue': '–ü—Ä–æ—Å—Ä–æ—á–µ–Ω',
                    'paid': '–ü–æ–≥–∞—à–µ–Ω'
                }
                
                text += f"üí≥ <b>–ö—Ä–µ–¥–∏—Ç ${amount:.0f}</b>\n"
                text += f"   üí∏ –ö –≤–æ–∑–≤—Ä–∞—Ç—É: ${amount_to_repay:.0f}\n"
                text += f"   üìÖ –í—ã–¥–∞–Ω: {credit['issued_at'].strftime('%d.%m.%Y')}\n"
                text += f"   ‚è∞ –°—Ä–æ–∫: {credit['due_date'].strftime('%d.%m.%Y')}\n"
                text += f"   {status_icons[credit['status']]} {status_text[credit['status']]}\n\n"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤
                if credit['status'] == 'active':
                    keyboard_buttons.append([
                        InlineKeyboardButton(
                            text=f"üí∞ –í–µ—Ä–Ω—É—Ç—å ${amount_to_repay:.0f}", 
                            callback_data=f"credit:repay:{credit['id']}"
                        )
                    ])
        else:
            text += "üìù –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
        keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="credits:menu")])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except:
            await callback.message.answer(text, reply_markup=keyboard)
        
        await callback.answer()


@router.callback_query(F.data == "vip:bonuses")
async def vip_bonuses(callback: CallbackQuery):
    """VIP –±–æ–Ω—É—Å—ã"""
    if await check_if_banned(callback):
        return
    
    from src.database import get_session
    from src.models import User
    
    telegram_id = callback.from_user.id
    
    async for session in get_session():
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not user.is_vip:
            await callback.answer("‚ùå VIP –±–æ–Ω—É—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            return
        
        # –°—Ç–∞—Ç—É—Å –±–æ–Ω—É—Å–æ–≤
        cashback_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if user.vip_cashback_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        multiplier_status = "‚úÖ –í–∫–ª—é—á–µ–Ω" if user.vip_multiplier_enabled else "‚ùå –í—ã–∫–ª—é—á–µ–Ω"
        
        text = "‚≠ê <b>VIP –±–æ–Ω—É—Å—ã</b>\n\n"
        text += "üí∞ <b>–í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤:</b>\n"
        text += f"‚îú –°—Ç–∞—Ç—É—Å: {cashback_status}\n"
        text += f"‚îú –ü—Ä–æ—Ü–µ–Ω—Ç: {user.vip_cashback_percentage}%\n"
        text += f"‚îî –í–æ–∑–≤—Ä–∞—Ç —á–∞—Å—Ç–∏ –ø—Ä–æ–∏–≥—Ä–∞–Ω–Ω–æ–π —Å—É–º–º—ã\n\n"
        text += "üéØ <b>–ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–µ–π:</b>\n"
        text += f"‚îú –°—Ç–∞—Ç—É—Å: {multiplier_status}\n"
        text += f"‚îú –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {user.vip_multiplier_value/100:.1f}x\n"
        text += f"‚îî –£–≤–µ–ª–∏—á–µ–Ω–∏–µ –≤—ã–∏–≥—Ä—ã—à–µ–π –Ω–∞ 30%\n\n"
        text += "üí° <b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
        text += "‚îú –ü—Ä–∏ –ø—Ä–æ–∏–≥—Ä—ã—à–µ: –≤–æ–∑–≤—Ä–∞—Ç —á–∞—Å—Ç–∏ —Å—É–º–º—ã\n"
        text += "‚îî –ü—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ: —É–≤–µ–ª–∏—á–µ–Ω–∏–µ –ø—Ä–∏–∑–∞"
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text=f"üí∞ –í–æ–∑–≤—Ä–∞—Ç: {'–í—ã–∫–ª—é—á–∏—Ç—å' if user.vip_cashback_enabled else '–í–∫–ª—é—á–∏—Ç—å'}", 
                callback_data=f"vip:toggle:cashback"
            )],
            [InlineKeyboardButton(
                text=f"üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {'–í—ã–∫–ª—é—á–∏—Ç—å' if user.vip_multiplier_enabled else '–í–∫–ª—é—á–∏—Ç—å'}", 
                callback_data=f"vip:toggle:multiplier"
            )],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_profile")]
        ])
        
        try:
            await callback.message.edit_text(text, reply_markup=keyboard)
        except:
            await callback.message.answer(text, reply_markup=keyboard)
        
        await callback.answer()


@router.callback_query(F.data.startswith("credit:repay:"))
async def repay_credit(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫—Ä–µ–¥–∏—Ç–∞"""
    if await check_if_banned(callback):
        return
    
    from src.database import get_session
    from src.models import User
    from src.services.rating_service import CreditService
    
    telegram_id = callback.from_user.id
    credit_id = int(callback.data.split(":")[2])
    
    async for session in get_session():
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—Ä–µ–¥–∏—Ç
        success, message = await CreditService.repay_credit(user.id, credit_id)
        
        if success:
            await callback.answer(f"‚úÖ {message}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∫—Ä–µ–¥–∏—Ç–æ–≤
            await list_credits(callback)
        else:
            await callback.answer(f"‚ùå {message}")


@router.callback_query(F.data.startswith("vip:toggle:"))
async def toggle_vip_bonus(callback: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ VIP –±–æ–Ω—É—Å–æ–≤"""
    if await check_if_banned(callback):
        return
    
    from src.database import get_session
    from src.models import User
    
    telegram_id = callback.from_user.id
    bonus_type = callback.data.split(":")[2]
    
    async for session in get_session():
        result = await session.execute(
            select(User).where(User.telegram_id == telegram_id)
        )
        user = result.scalar_one_or_none()
        
        if not user:
            await callback.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        if not user.is_vip:
            await callback.answer("‚ùå VIP –±–æ–Ω—É—Å—ã –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ VIP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
            return
        
        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –±–æ–Ω—É—Å
        if bonus_type == "cashback":
            user.vip_cashback_enabled = not user.vip_cashback_enabled
            status = "–≤–∫–ª—é—á–µ–Ω" if user.vip_cashback_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            await callback.answer(f"üí∞ –í–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤ {status}")
        elif bonus_type == "multiplier":
            user.vip_multiplier_enabled = not user.vip_multiplier_enabled
            status = "–≤–∫–ª—é—á–µ–Ω" if user.vip_multiplier_enabled else "–≤—ã–∫–ª—é—á–µ–Ω"
            await callback.answer(f"üéØ –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä—ã—à–µ–π {status}")
        
        await session.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é VIP –±–æ–Ω—É—Å–æ–≤
        await vip_bonuses(callback)
