from aiogram import Router
from aiogram.filters import Command
from aiogram.types import Message, LabeledPrice, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from sqlalchemy import select
from src.models import User
from src.services.wallet_service import wallet_service
from src.utils.ban_check import check_if_banned
# –£–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç async_session_maker, –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç

router = Router()

# –ö—É—Ä—Å –æ–±–º–µ–Ω–∞: 1 Telegram Star = 10 —Ü–µ–Ω—Ç–æ–≤ (0.10$) - –≤—ã–≥–æ–¥–Ω—ã–π –∫—É—Ä—Å!
STAR_TO_CENT_RATE = 10

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏
PACKAGES = {
    "small": {
        "stars": 100,
        "cents": 100000,  # $1000
        "name": "üí∞ –ü–∞–∫–µ—Ç –±–æ–º–∂–∞",
        "description": "100 Telegram Stars ‚Üí $1000"
    },
    "medium": {
        "stars": 500,
        "cents": 500000,  # $5000
        "name": "üíé –ü–∞–∫–µ—Ç –¥—ç–ø–µ—Ä–∞", 
        "description": "500 Telegram Stars ‚Üí $5000"
    },
    "large": {
        "stars": 1000,
        "cents": 1200000,  # $12000
        "name": "üëë –ü–∞–∫–µ—Ç —Ö–∞–π—Ä–æ–ª–ª–µ—Ä–∞",
        "description": "1000 Telegram Stars ‚Üí $12000"
    },
    "mega": {
        "stars": 2000,
        "cents": 3500000,  # $35000
        "name": "üöÄ –ü–ê–ö–ï–¢ –ö–£–ü–¨–ï–†–ê",
        "description": "2000 Telegram Stars ‚Üí $35000"
    }
}


@router.message(Command('buy'))
async def cmd_buy(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–∫–µ—Ç—ã –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
    if await check_if_banned(message):
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = message.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø–∞–∫–µ—Ç–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text=PACKAGES["small"]["name"],
                callback_data=f"buy_package:small"
            )
        ],
        [
            InlineKeyboardButton(
                text=PACKAGES["medium"]["name"],
                callback_data=f"buy_package:medium"
            )
        ],
        [
            InlineKeyboardButton(
                text=PACKAGES["large"]["name"],
                callback_data=f"buy_package:large"
            )
        ],
        [
            InlineKeyboardButton(
                text=PACKAGES["mega"]["name"],
                callback_data=f"buy_package:mega"
            )
        ]
    ])

    text = "üí≥ <b>–ü–æ–∫—É–ø–∫–∞ –º–æ–Ω–µ—Ç</b>\n\n"
    text += "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–∫–µ—Ç –¥–ª—è –ø–æ–∫—É–ø–∫–∏:\n\n"
    
    for package_id, package in PACKAGES.items():
        if package_id == "mega":
            # –í—ã–¥–µ–ª—è–µ–º –ø–∞–∫–µ—Ç –∫—É–ø—å–µ—Ä–∞
            text += f"üî• <b>{package['name']}</b> üî•\n"
            text += f"<b>{package['description']}</b>\n\n"
        else:
            text += f"{package['name']}\n"
            text += f"{package['description']}\n\n"

    await message.answer(text, reply_markup=keyboard)


@router.callback_query(lambda c: c.data.startswith('buy_package:'))
async def handle_buy_package(callback_query, bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
    await callback_query.answer()
    
    package_id = callback_query.data.split(':')[1]
    if package_id not in PACKAGES:
        await callback_query.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç")
        return
    
    package = PACKAGES[package_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    telegram_id = callback_query.from_user.id
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.telegram_id == telegram_id))
        user = result.scalar_one_or_none()
        if not user:
            await callback_query.message.edit_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start")
            return

    try:
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–≤–æ–π—Å –¥–ª—è Telegram Stars
        await bot.send_invoice(
            chat_id=callback_query.message.chat.id,
            title=package["name"],
            description=package["description"],
            payload=f"buy_{package_id}_{user.id}",
            provider_token="",  # –î–ª—è Telegram Stars –Ω–µ –Ω—É–∂–µ–Ω provider_token
            currency="XTR",  # Telegram Stars
            prices=[LabeledPrice(label=package["name"], amount=package["stars"])],
            start_parameter=f"buy_{package_id}",
            need_name=False,
            need_phone_number=False,
            need_email=False,
            need_shipping_address=False,
            send_phone_number_to_provider=False,
            send_email_to_provider=False,
            is_flexible=False
        )
        
        await callback_query.message.delete()
        
    except Exception as e:
        await callback_query.message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞: {e}")


@router.message(lambda message: message.successful_payment is not None)
async def handle_successful_payment(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
    payment = message.successful_payment
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ payload
    payload_parts = payment.invoice_payload.split('_')
    if len(payload_parts) != 3 or payload_parts[0] != "buy":
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–ª–∞—Ç–µ–∂–∞")
        return
    
    package_id = payload_parts[1]
    user_id = int(payload_parts[2])
    
    if package_id not in PACKAGES:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞–∫–µ—Ç")
        return
    
    package = PACKAGES[package_id]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    from src.database import async_session_maker
    async with async_session_maker() as session:
        result = await session.execute(select(User).where(User.id == user_id))
        user = result.scalar_one_or_none()
        if not user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É –ø–ª–∞—Ç–µ–∂–∞
        if payment.total_amount != package["stars"]:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞")
            return
        
        # –ó–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –Ω–∞ –±–∞–ª–∞–Ω—Å
        await wallet_service.add_funds(user.id, package["cents"], "purchase")
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
        new_balance = await wallet_service.get_balance(user.id)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        text = f"‚úÖ <b>–ü–æ–∫—É–ø–∫–∞ —É—Å–ø–µ—à–Ω–∞!</b>\n\n"
        text += f"üì¶ –ü–∞–∫–µ—Ç: {package['name']}\n"
        text += f"üí∞ –ü–æ–ª—É—á–µ–Ω–æ: ${package['cents'] / 100:.2f}\n"
        text += f"üíµ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: ${new_balance / 100:.2f}\n\n"
        text += "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üéâ"
        
        await message.answer(text)
