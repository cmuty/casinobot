from sqlalchemy import select
from sqlalchemy.ext.asyncio import AsyncSession
from src.models import User, Wallet, Transaction
import logging

logger = logging.getLogger(__name__)


class WalletService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–æ—à–µ–ª—å–∫–∞–º–∏"""
    
    @staticmethod
    async def get_or_create_wallet(user_id: int) -> Wallet:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –∫–æ—à–µ–ª—ë–∫"""
        from src.database import async_session_maker
        
        async with async_session_maker() as session:
            result = await session.execute(
                select(Wallet).where(Wallet.user_id == user_id)
            )
            wallet = result.scalar_one_or_none()
            
            if not wallet:
                wallet = Wallet(user_id=user_id, balance_cents=0)
                session.add(wallet)
                await session.commit()
                await session.refresh(wallet)
            
            return wallet
    
    @staticmethod
    async def get_balance(user_id: int) -> int:
        """–ü–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        wallet = await WalletService.get_or_create_wallet(user_id)
        return wallet.balance_cents
    
    @staticmethod
    async def credit(user_id: int, amount_cents: int, reason: str):
        """–ù–∞—á–∏—Å–ª–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        from src.database import async_session_maker
        
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—ë–∫
            result = await session.execute(
                select(Wallet).where(Wallet.user_id == user_id)
            )
            wallet = result.scalar_one_or_none()
            
            if not wallet:
                wallet = Wallet(user_id=user_id, balance_cents=0)
                session.add(wallet)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            wallet.balance_cents += amount_cents
            
            # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction(
                user_id=user_id,
                type='credit',
                amount_cents=amount_cents,
                status='completed',
                meta=reason
            )
            session.add(transaction)
            
            await session.commit()
            await session.refresh(transaction)
            
            logger.info(f"üí∞ Credit: user={user_id}, amount={amount_cents}, reason={reason}")
            
            return transaction
    
    @staticmethod
    async def debit(user_id: int, amount_cents: int, reason: str):
        """–°–ø–∏—Å–∞—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞"""
        from src.database import async_session_maker
        
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—ë–∫
            result = await session.execute(
                select(Wallet).where(Wallet.user_id == user_id)
            )
            wallet = result.scalar_one_or_none()
            
            if not wallet or wallet.balance_cents < amount_cents:
                raise ValueError("Insufficient funds")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å
            wallet.balance_cents -= amount_cents
            
            # –°–æ–∑–¥–∞—ë–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
            transaction = Transaction(
                user_id=user_id,
                type='debit',
                amount_cents=amount_cents,
                status='completed',
                meta=reason
            )
            session.add(transaction)
            
            await session.commit()
            await session.refresh(transaction)
            
            logger.info(f"üí∏ Debit: user={user_id}, amount={amount_cents}, reason={reason}")
            
            return transaction
    
    @staticmethod
    async def add_funds(user_id: int, amount_cents: int, reason: str):
        """–î–æ–±–∞–≤–∏—Ç—å —Å—Ä–µ–¥—Å—Ç–≤–∞ (–∞–ª–∏–∞—Å –¥–ª—è credit)"""
        return await WalletService.credit(user_id, amount_cents, reason)
    
    @staticmethod
    async def set_balance(user_id: int, new_balance_cents: int):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–¥–ª—è –∞–¥–º–∏–Ω–∞)"""
        from src.database import async_session_maker
        
        async with async_session_maker() as session:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ—à–µ–ª—ë–∫
            result = await session.execute(
                select(Wallet).where(Wallet.user_id == user_id)
            )
            wallet = result.scalar_one_or_none()
            
            if not wallet:
                wallet = Wallet(user_id=user_id, balance_cents=new_balance_cents)
                session.add(wallet)
            else:
                wallet.balance_cents = new_balance_cents
            
            await session.commit()
            
            logger.info(f"‚úèÔ∏è Set balance: user={user_id}, new_balance={new_balance_cents}")


wallet_service = WalletService()