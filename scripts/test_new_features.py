#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
"""

import asyncio
import logging
from src.database import init_db, close_db, async_session_maker
from src.models import User
from src.services.rating_service import RatingService, CreditService, VIPService
from src.services.wallet_service import wallet_service

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def test_new_features():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏"""
    try:
        await init_db()
        logger.info("üß™ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π...")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with async_session_maker() as session:
            # –ò—â–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            result = await session.execute("SELECT * FROM users LIMIT 1")
            user_data = result.fetchone()
            
            if not user_data:
                logger.warning("‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
                return
            
            user_id = user_data[0]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            logger.info(f"üë§ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º ID: {user_id}")
            
            # –¢–µ—Å—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞
            logger.info("üìä –¢–µ—Å—Ç 1: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞...")
            await RatingService.update_user_rating(user_id, 1000, 2000, 'daily')
            logger.info("‚úÖ –†–µ–π—Ç–∏–Ω–≥ –æ–±–Ω–æ–≤–ª–µ–Ω")
            
            # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞
            logger.info("üèÜ –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –ª–∏–¥–µ—Ä–±–æ—Ä–¥–∞...")
            leaderboard = await RatingService.get_leaderboard('daily', 5)
            logger.info(f"‚úÖ –õ–∏–¥–µ—Ä–±–æ—Ä–¥ –ø–æ–ª—É—á–µ–Ω: {len(leaderboard)} –∏–≥—Ä–æ–∫–æ–≤")
            
            # –¢–µ—Å—Ç 3: VIP –±–æ–Ω—É—Å
            logger.info("üíé –¢–µ—Å—Ç 3: VIP –±–æ–Ω—É—Å...")
            original_win = 1000
            vip_win = await VIPService.apply_vip_bonus(user_id, original_win)
            logger.info(f"‚úÖ VIP –±–æ–Ω—É—Å: {original_win} -> {vip_win}")
            
            # –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤ (–µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VIP)
            user_result = await session.execute("SELECT is_vip FROM users WHERE id = %s", (user_id,))
            is_vip = user_result.fetchone()[0] if user_result.fetchone() else False
            
            if is_vip:
                logger.info("üí≥ –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–æ–≤...")
                can_take, message = await CreditService.can_take_credit(user_id, 'daily_1k')
                logger.info(f"‚úÖ –ö—Ä–µ–¥–∏—Ç –¥–æ—Å—Ç—É–ø–µ–Ω: {can_take}, —Å–æ–æ–±—â–µ–Ω–∏–µ: {message}")
            else:
                logger.info("üí≥ –¢–µ—Å—Ç 4: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ VIP, –∫—Ä–µ–¥–∏—Ç—ã –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
            
            logger.info("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
    finally:
        await close_db()


if __name__ == '__main__':
    asyncio.run(test_new_features())
