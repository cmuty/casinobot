#!/usr/bin/env python3
"""
–¢–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã –∫—Ä–µ–¥–∏—Ç–æ–≤
"""

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from src.database import init_db, close_db
from src.services.rating_service import CreditService

async def test_credits():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–µ–¥–∏—Ç–æ–≤"""
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        await init_db()
        
        print("üí≥ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –∫—Ä–µ–¥–∏—Ç–æ–≤...")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤
        print("üìä –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫—Ä–µ–¥–∏—Ç–æ–≤...")
        available_credits = await CreditService.get_available_credits(1)  # user_id = 1
        print(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–µ–¥–∏—Ç—ã: {len(available_credits)}")
        
        for credit in available_credits:
            print(f"   - {credit['limit_type']}: ${credit['amount']/100:.0f}")
        
        # –¢–µ—Å—Ç –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞
        print("üí∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑—è—Ç–∏—è –∫—Ä–µ–¥–∏—Ç–∞...")
        success = await CreditService.take_credit(1, 100000, 'daily_1k')  # $1000
        print(f"‚úÖ –ö—Ä–µ–¥–∏—Ç –≤–∑—è—Ç: {success}")
        
        # –¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        print("üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—Ä–µ–¥–∏—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...")
        user_credits = await CreditService.get_user_credits(1)
        print(f"‚úÖ –ö—Ä–µ–¥–∏—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {len(user_credits)}")
        
        for credit in user_credits:
            print(f"   - ${credit['amount']/100:.0f} –∫ –≤–æ–∑–≤—Ä–∞—Ç—É: ${credit['amount_to_repay']/100:.0f}")
        
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
    finally:
        await close_db()

if __name__ == "__main__":
    asyncio.run(test_credits())
