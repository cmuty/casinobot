import asyncio
import logging
import os
from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application
from aiohttp import web

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º –∏–º–ø–æ—Ä—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞–ª —Å —Ä–æ—É—Ç–µ—Ä–æ–º
from src.config import settings as app_settings  # <-- –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω
from src.redis_db import init_redis, close_redis
from src.handlers import start, games, profile, bonus, admin, settings, buy, admin_panel, rating  # <-- –î–æ–±–∞–≤–ª–µ–Ω rating

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


async def create_bot():
    """–°–æ–∑–¥–∞—Ç—å —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞"""
    return Bot(
        token=app_settings.BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML)
    )


async def create_dispatcher():
    """–°–æ–∑–¥–∞—Ç—å –¥–∏—Å–ø–µ—Ç—á–µ—Ä"""
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(start.router)
    dp.include_router(admin_panel.router)
    dp.include_router(games.router)
    dp.include_router(profile.router)
    dp.include_router(bonus.router)
    dp.include_router(admin.router)
    dp.include_router(settings.router)
    dp.include_router(buy.router)
    dp.include_router(rating.router)
    
    return dp


async def polling_main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling (–¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏)"""
    bot = await create_bot()
    dp = await create_dispatcher()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
    try:
        await init_redis()
        logger.info("‚úÖ Redis initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Redis initialization failed: {e}")
        return
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("üé∞ LuckyStar Casino –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ polling")
        logger.info(f"Bot username: @{(await bot.get_me()).username}")
        await dp.start_polling(bot)
    finally:
        await close_redis()
        await bot.session.close()


async def webhook_main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook (–¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)"""
    bot = await create_bot()
    dp = await create_dispatcher()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Redis
    try:
        await init_redis()
        logger.info("‚úÖ Redis initialized successfully")
    except Exception as e:
        logger.error(f"‚ùå Redis initialization failed: {e}")
        return
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook
    webhook_url = f"{app_settings.WEBHOOK_URL}{app_settings.WEBHOOK_PATH}"
    await bot.set_webhook(webhook_url)
    logger.info(f"‚úÖ Webhook set to: {webhook_url}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app = web.Application()
    webhook_requests_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
    )
    webhook_requests_handler.register(app, path=app_settings.WEBHOOK_PATH)
    setup_application(app, dp, bot=bot)
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
    port = app_settings.PORT
    logger.info(f"üé∞ LuckyStar Casino –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    logger.info(f"Bot username: @{(await bot.get_me()).username}")
    
    return app


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—Å–∫–∞–µ–º –ª–∏ –º—ã –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ (Render)
    if app_settings.WEBHOOK_URL:
        # –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º —Å webhook
        app = await webhook_main()
        if app:
            runner = web.AppRunner(app)
            await runner.setup()
            site = web.TCPSite(runner, '0.0.0.0', app_settings.PORT)
            await site.start()
            
            # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
            try:
                await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            finally:
                await runner.cleanup()
    else:
        # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å polling
        await polling_main()


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("üëã Bot stopped")